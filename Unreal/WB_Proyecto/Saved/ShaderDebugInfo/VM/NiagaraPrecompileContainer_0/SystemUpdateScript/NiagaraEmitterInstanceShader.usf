#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_SystemState_LoopDelay;
	float Constants_SystemState_LoopDuration;
	float Constants_Grande_EmitterState_LoopDuration;
	float Constants_Grande_EmitterState_LoopDelay;
	int Constants_Grande_UniformRangedInt_Minimum;
	int Constants_Grande_UniformRangedInt_Maximum;
	int Constants_Grande_UniformRangedInt_RandomSeed;
	float Constants_Grande_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_Grande_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_Grande_SpawnBurst_Instantaneous_SpawnProbability;
	float Constants_Grande_UniformRangedFloat001_Minimum;
	float Constants_Grande_UniformRangedFloat001_Maximum;
	int Constants_Grande_UniformRangedFloat001_RandomSeed;
	float Constants_Grande_UniformRangedFloat002_Minimum;
	float Constants_Grande_UniformRangedFloat002_Maximum;
	int Constants_Grande_UniformRangedFloat002_RandomSeed;
	float3 Constants_Grande_RandomVector_ConstraintVector;
	int Constants_Grande_RandomVector_RandomSeed;
	float3 Constants_Grande_RandomVector001_ConstraintVector;
	int Constants_Grande_RandomVector001_RandomSeed;
	float3 Constants_Grande_UniformRangedVector_Minimum;
	float3 Constants_Grande_UniformRangedVector_Maximum;
	int Constants_Grande_UniformRangedVector_RandomSeed;
	int Emitter_RandomSeed;
}

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_User_Grande
{
	int RandomSeed;
};

struct FParamMap0_User
{
	FParamMap0_User_Grande Grande;
};

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedInt
{
	bool FixedRandomSeed;
	int Maximum;
	int Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	int ScalabilityExecutionState;
	bool SpawningbCanEverSpawn;
};

struct FParamMap0_SystemState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleBeamWidth
{
	float BeamWidthScale;
};

struct FParamMap0_RandomVector001
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float RibbonWidth;
};

struct FParamMap0_Particles
{
	float Age;
	float3 BeamSplineBinormal;
	float3 BeamSplineNormal;
	float3 BeamSplineTangent;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float JitterDelayTimer;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	NiagaraID RibbonID;
	float RibbonLinkOrder;
	float RibbonTwist;
	float RibbonWidth;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SystemState
{
	bool LoopCountIncreased;
};

struct FParamMap0_Local_SpawnBeam
{
	float3 BeamDirection;
	float3 BeamVector;
	float NormalizedExecIndex;
	float StartEndVecLength;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_JitterPosition
{
	float3 ModuleJitterOffset;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_CurlNoiseForce
{
	float AgeAdvancement;
	float DeterministicOffset;
	float Falloff;
	float3 SampledNoise;
	float3 SamplePosition;
};

struct FParamMap0_Local_BeamEmitterSetup
{
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
};

struct FParamMap0_Local
{
	FParamMap0_Local_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Local_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_JitterPosition JitterPosition;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnBeam SpawnBeam;
	FParamMap0_Local_SystemState SystemState;
};

struct FParamMap0_JitterPosition
{
	float JitterAmount;
	float JitterDelay;
	float3 JitterOffset;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_Grande_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Grande_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Grande
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Grande_Scalability Scalability;
	FParamMap0_Grande_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
};

struct FParamMap0_Engine_Grande
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	FParamMap0_Engine_Grande Grande;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float3 CurlNoiseConeMaskAxis;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float NoiseStrength;
	float3 PanNoiseField;
	int RandomSeed;
	float3 SamplePosition;
};

struct FParamMap0_Constants_SystemState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Grande_UniformRangedVector
{
	float3 Maximum;
	float3 Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Grande_UniformRangedInt
{
	int Maximum;
	int Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Grande_UniformRangedFloat002
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Grande_UniformRangedFloat001
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Grande_SpawnBurst_Instantaneous
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Grande_RandomVector001
{
	float3 ConstraintVector;
	int RandomSeed;
};

struct FParamMap0_Constants_Grande_RandomVector
{
	float3 ConstraintVector;
	int RandomSeed;
};

struct FParamMap0_Constants_Grande_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Grande
{
	FParamMap0_Constants_Grande_EmitterState EmitterState;
	FParamMap0_Constants_Grande_RandomVector RandomVector;
	FParamMap0_Constants_Grande_RandomVector001 RandomVector001;
	FParamMap0_Constants_Grande_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_Constants_Grande_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_Constants_Grande_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_Constants_Grande_UniformRangedInt UniformRangedInt;
	FParamMap0_Constants_Grande_UniformRangedVector UniformRangedVector;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Grande Grande;
	FParamMap0_Constants_SystemState SystemState;
};

struct FParamMap0_BeamWidth
{
	float BeamTwistAmount;
	float BeamWidth;
};

struct FParamMap0_BeamEmitterSetup
{
	bool AbsoluteEndTangent;
	bool AbsoluteStartTangent;
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float3 BeamStartTangent;
	bool UseBeamTangents;
};

struct FParamMap0
{
	FParamMap0_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_BeamWidth BeamWidth;
	FParamMap0_Constants Constants;
	FParamMap0_CurlNoiseForce CurlNoiseForce;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_Grande Grande;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_JitterPosition JitterPosition;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_RandomVector RandomVector;
	FParamMap0_RandomVector001 RandomVector001;
	FParamMap0_ScaleBeamWidth ScaleBeamWidth;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnBeam SpawnBeam;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_System System;
	FParamMap0_SystemState SystemState;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedInt UniformRangedInt;
	FParamMap0_UniformRangedVector UniformRangedVector;
	FParamMap0_User User;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Grande_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Grande_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Grande_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Grande_Func_(inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeInteger_Func_(int In_Min, int In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out int Out_Result, inout FSimulationContext Context);
void UniformRangedInt_Grande_Func_(out int Out_UniformRangedInt, inout FSimulationContext Context);
void SpawnBurst_Instantaneous_Grande_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat001_Grande_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat002_Grande_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void RandomVector_NF_TransformVector_Grande_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Grande_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void RandomVector001_NF_TransformVector_Grande_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomVector001_Grande_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void UniformRangedVector_Grande_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void BeamEmitterSetup_NF_TransformVector_Grande_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void BeamEmitterSetup_Grande_Func_(inout FSimulationContext Context);
void Grande_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result11 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result12 = In_Condition && Result11;
	int ENiagaraExecutionState_IfResult;
	int ENiagaraExecutionStateSource_IfResult;
	if(Result12)
	{
	ENiagaraExecutionState_IfResult = In_NewState;
	ENiagaraExecutionStateSource_IfResult = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult;
}

void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result13 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result14 = In_Condition && Result13;
	int ENiagaraExecutionState_IfResult1;
	int ENiagaraExecutionStateSource_IfResult1;
	if(Result14)
	{
	ENiagaraExecutionState_IfResult1 = In_NewState;
	ENiagaraExecutionStateSource_IfResult1 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult1 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult1 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult1;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult1;
}

void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result16 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result17 = In_Condition && Result16;
	int ENiagaraExecutionState_IfResult2;
	int ENiagaraExecutionStateSource_IfResult2;
	if(Result17)
	{
	ENiagaraExecutionState_IfResult2 = In_NewState;
	ENiagaraExecutionStateSource_IfResult2 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult2 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult2 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult2;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult2;
}

void SystemState_Func_(inout FSimulationContext Context)
{
	float Constant3 = 0;
	bool Result = NiagaraAll(Context.Map.System.Age == Constant3);
	float Constant4 = 0.016667;
	float Result1 = max(Context.Map.Constants.SystemState.LoopDuration, Constant4);
	float Duration_IfResult;
	if(Result)
	{
	Duration_IfResult = Result1;
	}
	else
	{
	Duration_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float Constant5 = 0;
	Context.Map.System.CurrentLoopDuration = Duration_IfResult;
	Context.Map.SystemState.LoopDelay = Constant5;
	float Result2 = Context.Map.System.Age + Context.Map.Engine.DeltaTime;
	float Result3 = Context.Map.Engine.DeltaTime + Context.Map.System.LoopedAge;
	float Result4 = Result3 / Context.Map.System.CurrentLoopDuration;
	int Count;
	Count = Result4;
	int Constant6 = 0;
	int Result5 = max(Count, Constant6);
	float Result6 = Result5 * Context.Map.System.CurrentLoopDuration;
	float Result7 = Result3 - Result6;
	int Constant7 = 0;
	bool Result8 = NiagaraAll(Result5 > Constant7);
	int Result9 = Result5 + Context.Map.System.LoopCount;
	Context.Map.System.Age = Result2;
	Context.Map.System.LoopedAge = Result7;
	Context.Map.Local.SystemState.LoopCountIncreased = Result8;
	Context.Map.System.LoopCount = Result9;
	float float_IfResult;
	if(Context.Map.SystemState.RecalculateDurationEachLoop)
	{
	float_IfResult = Context.Map.Constants.SystemState.LoopDuration;
	}
	else
	{
	float_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult;
	float LoopedAge_IfResult;
	if(Context.Map.Local.SystemState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult = float_IfResult;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult = Context.Map.System.CurrentLoopDuration;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	Context.Map.System.CurrentLoopDuration = CurrentLoopDuration_IfResult;
	Context.Map.System.LoopedAge = LoopedAge_IfResult;
	float Result10 = Context.Map.System.LoopedAge / Context.Map.System.CurrentLoopDuration;
	Context.Map.System.NormalizedLoopAge = Result10;
	bool Constant8 = true;
	int Constant9 = 0;
	SystemState_SystemChangeState002_Func_(Context.Map.Transient.ScalabilityExecutionState, Constant8, Constant9, Context);
	int Constant10 = 3;
	bool Constant11 = false;
	int Constant12 = 3;
	SystemState_SystemChangeState_Func_(Constant10, Constant11, Constant12, Context);
	bool Constant13 = true;
	Context.Map.System.bCompleteOnInactive = Constant13;
	int Constant14 = 0;
	bool Result15 = NiagaraAll(Context.Map.Engine.Owner.ExecutionState != Constant14);
	int Constant15 = 2;
	SystemState_SystemChangeState001_Func_(Context.Map.Engine.Owner.ExecutionState, Result15, Constant15, Context);
}

void EmitterState_EmitterChangeState002_Grande_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant27 = 3;
	bool Result32 = NiagaraAll(Context.Map.Grande.ExecutionState != Constant27);
	int Constant28 = 4;
	bool Result33 = NiagaraAll(Context.Map.Grande.ExecutionState != Constant28);
	bool Result34 = Result32 && Result33;
	bool Result35 = In_Condition && Result34;
	bool Result36 = NiagaraAll(Context.Map.Grande.ExecutionStateSource <= In_NewStateSource);
	bool Result37 = Result35 && Result36;
	int ENiagaraExecutionState_IfResult3;
	int ENiagaraExecutionStateSource_IfResult3;
	if(Result37)
	{
	ENiagaraExecutionState_IfResult3 = In_NewState;
	ENiagaraExecutionStateSource_IfResult3 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult3 = Context.Map.Grande.ExecutionState;
	ENiagaraExecutionStateSource_IfResult3 = Context.Map.Grande.ExecutionStateSource;
	}
	Context.Map.Grande.ExecutionState = ENiagaraExecutionState_IfResult3;
	Context.Map.Grande.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult3;
}

void EmitterState_EmitterChangeState005_Grande_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant33 = 3;
	bool Result41 = NiagaraAll(Context.Map.Grande.ExecutionState != Constant33);
	int Constant34 = 4;
	bool Result42 = NiagaraAll(Context.Map.Grande.ExecutionState != Constant34);
	bool Result43 = Result41 && Result42;
	bool Result44 = In_Condition && Result43;
	bool Result45 = NiagaraAll(Context.Map.Grande.ExecutionStateSource <= In_NewStateSource);
	bool Result46 = Result44 && Result45;
	int ENiagaraExecutionState_IfResult4;
	int ENiagaraExecutionStateSource_IfResult4;
	if(Result46)
	{
	ENiagaraExecutionState_IfResult4 = In_NewState;
	ENiagaraExecutionStateSource_IfResult4 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult4 = Context.Map.Grande.ExecutionState;
	ENiagaraExecutionStateSource_IfResult4 = Context.Map.Grande.ExecutionStateSource;
	}
	Context.Map.Grande.ExecutionState = ENiagaraExecutionState_IfResult4;
	Context.Map.Grande.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult4;
}

void EmitterState_EmitterChangeState003_Grande_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant39 = 3;
	bool Result51 = NiagaraAll(Context.Map.Grande.ExecutionState != Constant39);
	int Constant40 = 4;
	bool Result52 = NiagaraAll(Context.Map.Grande.ExecutionState != Constant40);
	bool Result53 = Result51 && Result52;
	bool Result54 = In_Condition && Result53;
	bool Result55 = NiagaraAll(Context.Map.Grande.ExecutionStateSource <= In_NewStateSource);
	bool Result56 = Result54 && Result55;
	int ENiagaraExecutionState_IfResult5;
	int ENiagaraExecutionStateSource_IfResult5;
	if(Result56)
	{
	ENiagaraExecutionState_IfResult5 = In_NewState;
	ENiagaraExecutionStateSource_IfResult5 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult5 = Context.Map.Grande.ExecutionState;
	ENiagaraExecutionStateSource_IfResult5 = Context.Map.Grande.ExecutionStateSource;
	}
	Context.Map.Grande.ExecutionState = ENiagaraExecutionState_IfResult5;
	Context.Map.Grande.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult5;
}

void EmitterState_Grande_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Grande.ExecutionState;
	float Constant16 = 0.016667;
	float Result18 = max(Context.Map.Constants.Grande.EmitterState.LoopDuration, Constant16);
	Context.Map.Local.EmitterState.LoopDuration = Result18;
	float Constant17 = 0;
	bool Result19 = NiagaraAll(Context.Map.Grande.Age == Constant17);
	float Duration_IfResult1;
	if(Result19)
	{
	Duration_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult1 = Context.Map.Grande.CurrentLoopDuration;
	}
	float Constant18 = 0;
	Context.Map.Grande.CurrentLoopDuration = Duration_IfResult1;
	Context.Map.EmitterState.LoopDelay = Constant18;
	float Result20 = Context.Map.Grande.Age + Context.Map.Engine.DeltaTime;
	float Result21 = Context.Map.Engine.DeltaTime + Context.Map.Grande.LoopedAge;
	float Result22 = Result21 / Context.Map.Grande.CurrentLoopDuration;
	int Count1;
	Count1 = Result22;
	int Constant19 = 0;
	int Result23 = max(Count1, Constant19);
	float Result24 = Result23 * Context.Map.Grande.CurrentLoopDuration;
	float Result25 = Result21 - Result24;
	int Constant20 = 0;
	bool Result26 = NiagaraAll(Result23 > Constant20);
	int Result27 = Result23 + Context.Map.Grande.LoopCount;
	Context.Map.Grande.Age = Result20;
	Context.Map.Grande.LoopedAge = Result25;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result26;
	Context.Map.Grande.LoopCount = Result27;
	bool Constant21 = false;
	Context.Map.EmitterState.RecalculateDurationEachLoop = Constant21;
	float float_IfResult1;
	if(Context.Map.EmitterState.RecalculateDurationEachLoop)
	{
	float_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	float_IfResult1 = Context.Map.Grande.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult1;
	float LoopedAge_IfResult1;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult1 = float_IfResult1;
	LoopedAge_IfResult1 = Context.Map.Grande.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult1 = Context.Map.Grande.CurrentLoopDuration;
	LoopedAge_IfResult1 = Context.Map.Grande.LoopedAge;
	}
	Context.Map.Grande.CurrentLoopDuration = CurrentLoopDuration_IfResult1;
	Context.Map.Grande.LoopedAge = LoopedAge_IfResult1;
	float Result28 = Context.Map.Grande.LoopedAge / Context.Map.Grande.CurrentLoopDuration;
	Context.Map.Grande.NormalizedLoopAge = Result28;
	float Constant22 = 0;
	float Constant23 = 1.0001;
	float Result29 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant22,Constant23);
	Context.Map.Grande.Scalability.DistanceFraction = Result29;
	int Constant24 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant24;
	int Constant25 = 0;
	bool Result30 = NiagaraAll(Context.Map.Engine.Grande.NumParticles == Constant25);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result30;
	int Constant26 = 0;
	bool Result31 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant26);
	EmitterState_EmitterChangeState002_Grande_Func_(Context.Map.System.ExecutionState, Result31, Context.Map.System.ExecutionStateSource, Context);
	int Constant29 = 1;
	int Constant30 = 0;
	bool Result38 = NiagaraAll(Context.Map.System.ExecutionState != Constant30);
	int Constant31 = 2;
	bool Result39 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant31);
	bool Result40 = Result38 && Result39;
	int Constant32 = 1;
	EmitterState_EmitterChangeState005_Grande_Func_(Constant29, Result40, Constant32, Context);
	int Constant35 = 3;
	int Constant36 = 0;
	bool Result47 = NiagaraAll(Context.Map.Grande.ExecutionState != Constant36);
	int Constant37 = 0;
	bool Result48 = NiagaraAll(Context.Map.Grande.ExecutionStateSource != Constant37);
	bool Result49 = Result47 && Result48;
	bool Result50 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result49;
	int Constant38 = 3;
	EmitterState_EmitterChangeState003_Grande_Func_(Constant35, Result50, Constant38, Context);
}

void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant51 = false;
	int Constant52 = 0;
	bool Result57 = NiagaraAll(In_RandomnessMode == Constant52);
	bool Result58 = Constant51 && Result57;
	int Constant53 = 1;
	bool Result59 = NiagaraAll(In_RandomnessMode == Constant53);
	bool Result60 = Result58 || Result59;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.User.Grande.RandomSeed;
	}
	int Constant54 = 0;
	int Constant55 = 0;
	int Constant56 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant54;
	Seed3_IfResult = Constant55;
	}
	else
	{
	Seed1_IfResult = Constant56;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant57 = -1;
	int Constant58 = -1;
	int Constant59 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result60)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant57;
	Seed2_IfResult1 = Constant58;
	Seed3_IfResult1 = Constant59;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result60;
}

void RandomRangeInteger_Func_(int In_Min, int In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out int Out_Result, inout FSimulationContext Context)
{
	int Constant47 = (0);
	bool Constant48 = false;
	int Constant49 = 0;
	int Constant50 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant47, In_OverrideSeed, Constant49, Constant50, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms, Context);
	int Result61 = In_Max - In_Min;
	int Constant60 = 1;
	int Result62 = Result61 + Constant60;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed3;
	int Result63 = rand_int(Result62, Seed1, Seed2, Seed3);
	int Result64 = rand_int(Result62);
	int Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result63;
	}
	else
	{
	Random_IfResult = Result64;
	}
	int Result65 = In_Min + Random_IfResult;
	Out_Result = Result65;
}

void UniformRangedInt_Grande_Func_(out int Out_UniformRangedInt, inout FSimulationContext Context)
{
	bool Constant41 = false;
	Context.Map.UniformRangedInt.OverrideRandomness = Constant41;
	int Constant42 = 0;
	Context.Map.UniformRangedInt.RandomnessMode = Constant42;
	bool Constant43 = false;
	Context.Map.UniformRangedInt.OverrideSeed = Constant43;
	bool Constant44 = false;
	Context.Map.UniformRangedInt.FixedRandomSeed = Constant44;
	int Constant45 = 0;
	bool Constant46 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.UniformRangedInt.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.UniformRangedInt.RandomnessMode;
	Override_IfResult = Context.Map.UniformRangedInt.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant45;
	Override_IfResult = Constant46;
	}
	int RandomRangeInteger_Func_Output_Result;
	RandomRangeInteger_Func_(Context.Map.Constants.Grande.UniformRangedInt.Minimum, Context.Map.Constants.Grande.UniformRangedInt.Maximum, Context.Map.Constants.Grande.UniformRangedInt.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.UniformRangedInt.FixedRandomSeed, RandomRangeInteger_Func_Output_Result, Context);
	Out_UniformRangedInt = RandomRangeInteger_Func_Output_Result;
}

void SpawnBurst_Instantaneous_Grande_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.Grande.LoopedAge;
	float Result66 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result67 = Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnTime - Result66;
	float Constant61 = 0;
	float Output11;
	Output11 = Constant61;
	bool Result68 = NiagaraAll(Result67 >= Output11);
	float Result69 = Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result70 = NiagaraAll(Result69 < Output11);
	bool Result71 = Result68 && Result70;
	float Constant62 = 1;
	Context.Map.Transient.ScalabilityEmitterSpawnCountScale = Constant62;
	int Constant63 = 0;
	bool Result72 = NiagaraAll(Context.Map.SpawnBurst_Instantaneous.SpawnCount == Constant63);
	float Constant64 = 0;
	float Result73 = Context.Map.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Grande.SpawnCountScale;
	float Constant65 = 1;
	float Result74 = max(Result73, Constant65);
	float float_IfResult2;
	if(Result72)
	{
	float_IfResult2 = Constant64;
	}
	else
	{
	float_IfResult2 = Result74;
	}
	float Constant66 = 0;
	NiagaraSpawnInfo Output12;
	Output12.Count = float_IfResult2;
	Output12.InterpStartDt = Result67;
	Output12.IntervalDt = Constant66;
	Output12.SpawnGroup = Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant67 = 0;
	float Constant68 = 0;
	float Constant69 = 0;
	NiagaraSpawnInfo Output13;
	Output13.Count = Constant67;
	Output13.InterpStartDt = Constant68;
	Output13.SpawnGroup = Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnGroup;
	Output13.IntervalDt = Constant69;
	NiagaraSpawnInfo SpawnInfo_IfResult;
	if(Result71)
	{
	SpawnInfo_IfResult = Output12;
	}
	else
	{
	SpawnInfo_IfResult = Output13;
	}
	Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult;
	bool Constant70 = false;
	Context.Map.Transient.SpawningbCanEverSpawn = Constant70;
	bool Result75 = NiagaraAll(Context.Map.Grande.LoopedAge <= Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnTime);
	bool Result76 = Context.Map.Transient.SpawningbCanEverSpawn || Result75;
	Context.Map.Transient.SpawningbCanEverSpawn = Result76;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant77 = (0);
	bool Constant78 = false;
	int Constant79 = 0;
	int Constant80 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant77, In_OverrideSeed, Constant79, Constant80, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1, Context);
	float Result77 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed3;
	float Result78 = rand_float(Result77, Seed11, Seed21, Seed31);
	float Result79 = rand_float(Result77);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result78;
	}
	else
	{
	Random_IfResult1 = Result79;
	}
	float Result80 = In_Min + Random_IfResult1;
	Out_Result = Result80;
}

void UniformRangedFloat001_Grande_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant71 = false;
	Context.Map.UniformRangedFloat001.OverrideRandomness = Constant71;
	int Constant72 = 0;
	Context.Map.UniformRangedFloat001.RandomnessMode = Constant72;
	bool Constant73 = false;
	Context.Map.UniformRangedFloat001.OverrideSeed = Constant73;
	bool Constant74 = false;
	Context.Map.UniformRangedFloat001.FixedRandomSeed = Constant74;
	int Constant75 = 0;
	bool Constant76 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.Map.UniformRangedFloat001.OverrideRandomness)
	{
	Mode_IfResult1 = Context.Map.UniformRangedFloat001.RandomnessMode;
	Override_IfResult1 = Context.Map.UniformRangedFloat001.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant75;
	Override_IfResult1 = Constant76;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.Map.Constants.Grande.UniformRangedFloat001.Minimum, Context.Map.Constants.Grande.UniformRangedFloat001.Maximum, Context.Map.Constants.Grande.UniformRangedFloat001.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.Map.UniformRangedFloat001.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void UniformRangedFloat002_Grande_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant81 = false;
	Context.Map.UniformRangedFloat002.OverrideRandomness = Constant81;
	int Constant82 = 0;
	Context.Map.UniformRangedFloat002.RandomnessMode = Constant82;
	bool Constant83 = false;
	Context.Map.UniformRangedFloat002.OverrideSeed = Constant83;
	bool Constant84 = false;
	Context.Map.UniformRangedFloat002.FixedRandomSeed = Constant84;
	int Constant85 = 0;
	bool Constant86 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.Map.UniformRangedFloat002.OverrideRandomness)
	{
	Mode_IfResult2 = Context.Map.UniformRangedFloat002.RandomnessMode;
	Override_IfResult2 = Context.Map.UniformRangedFloat002.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant85;
	Override_IfResult2 = Constant86;
	}
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.Map.Constants.Grande.UniformRangedFloat002.Minimum, Context.Map.Constants.Grande.UniformRangedFloat002.Maximum, Context.Map.Constants.Grande.UniformRangedFloat002.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.Map.UniformRangedFloat002.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result1;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant94 = 0;
	bool Result81 = NiagaraAll(In_SourceSpace == Constant94);
	int Constant95 = 0;
	bool Result82 = NiagaraAll(In_DestinationSpace == Constant95);
	bool Result83 = Result81 && Result82;
	int Constant96 = 1;
	bool Result84 = NiagaraAll(In_SourceSpace == Constant96);
	int Constant97 = 1;
	bool Result85 = NiagaraAll(In_DestinationSpace == Constant97);
	bool Result86 = Result84 && Result85;
	bool Result87 = Result83 || Result86;
	int Constant98 = 2;
	bool Result88 = NiagaraAll(In_SourceSpace == Constant98);
	int Constant99 = 2;
	bool Result89 = NiagaraAll(In_DestinationSpace == Constant99);
	bool Result90 = Result88 && Result89;
	bool Result91 = Result87 || Result90;
	bool Result92 = Result81 && Result89;
	bool Result93 = Result88 && Result82;
	bool Result94 = Result92 || Result93;
	bool Result95 = In_bLocalSpace && Result94;
	bool Result96 = Result91 || Result95;
	bool Result97 = !In_bLocalSpace;
	bool Result98 = Result81 && Result85;
	bool Result99 = Result84 && Result82;
	bool Result100 = Result98 || Result99;
	bool Result101 = Result97 && Result100;
	bool Result102 = Result96 || Result101;
	bool Result103 = In_bLocalSpace && Result98;
	bool Result104 = Result88 && Result85;
	bool Result105 = Result103 || Result104;
	bool Result106 = Result97 && Result93;
	bool Result107 = Result105 || Result106;
	float4x4 Matrix_IfResult1;
	if(Result107)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result102;
	Out_OutTransform = Matrix_IfResult1;
}

void RandomVector_NF_TransformVector_Grande_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant93 = true;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant93, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result108 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult = In_InVector;
	}
	else
	{
	Vector_IfResult = Result108;
	}
	Out_OutVector = Vector_IfResult;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant108 = (0);
	bool Constant109 = false;
	int Constant110 = 0;
	int Constant111 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant108, In_OverrideSeed, Constant110, Constant111, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2, Context);
	float2 Result109 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed3;
	float2 Result110 = rand_float(Result109, Seed12, Seed22, Seed32);
	float2 Result111 = rand_float(Result109);
	float2 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result110;
	}
	else
	{
	Random_IfResult2 = Result111;
	}
	float2 Result112 = In_Min + Random_IfResult2;
	Out_Result = Result112;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant117 = (0);
	bool Constant118 = false;
	int Constant119 = 0;
	int Constant120 = (0);
	bool Constant121 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo3;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms3;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant117, In_OverrideSeed, Constant119, Constant120, Constant121, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo3, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms3, Context);
	float Result120 = In_Max - In_Min;
	int Seed13;
	int Seed23;
	int Seed33;
	Seed13 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo3.Seed1;
	Seed23 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo3.Seed2;
	Seed33 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo3.Seed3;
	float Result121 = rand_float(Result120, Seed13, Seed23, Seed33);
	float Result122 = rand_float(Result120);
	float Random_IfResult3;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms3)
	{
	Random_IfResult3 = Result121;
	}
	else
	{
	Random_IfResult3 = Result122;
	}
	float Result123 = In_Min + Random_IfResult3;
	Out_Result = Result123;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant106 = float2(0,-1);
	float2 Constant107 = float2(6.28319,1);
	float2 RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Constant106, Constant107, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result2, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result2.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result2.y;
	float Result113 = cos(Phi);
	float Result114 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result115 = 1 - Result114;
	float Result116 = sqrt(Result115);
	float Result117 = Result113 * Result116;
	float Result118 = sin(Phi);
	float Result119 = Result118 * Result116;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result117;
	PositionOnSphere.y = Result119;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant112 = 0;
	float Constant113 = 6.28319;
	int Constant114 = -1;
	int Constant115 = 0;
	bool Constant116 = false;
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Constant112, Constant113, Constant114, Constant115, Constant116, RandomRangeFloat_Func_Output_Result3, Context);
	float Result124 = cos(RandomRangeFloat_Func_Output_Result3);
	float Result125 = sin(RandomRangeFloat_Func_Output_Result3);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result124;
	PositionOnCircle.y = Result125;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector_Grande_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	bool Constant89 = false;
	Context.Map.RandomVector.ConstraintoAxis = Constant89;
	int Constant90 = 2;
	int Constant91 = 0;
	bool Constant92 = false;
	float3 RandomVector_NF_TransformVector_Grande_Func_Output_OutVector;
	RandomVector_NF_TransformVector_Grande_Func_(Context.Map.Constants.Grande.RandomVector.ConstraintVector, Constant90, Constant91, Constant92, RandomVector_NF_TransformVector_Grande_Func_Output_OutVector, Context);
	bool Constant100 = false;
	Context.Map.RandomVector.OverrideRandomness = Constant100;
	int Constant101 = 0;
	Context.Map.RandomVector.RandomnessMode = Constant101;
	bool Constant102 = false;
	Context.Map.RandomVector.OverrideSeed = Constant102;
	bool Constant103 = false;
	Context.Map.RandomVector.FixedRandomSeed = Constant103;
	int Constant104 = 0;
	bool Constant105 = false;
	int Mode_IfResult3;
	bool Override_IfResult3;
	if(Context.Map.RandomVector.OverrideRandomness)
	{
	Mode_IfResult3 = Context.Map.RandomVector.RandomnessMode;
	Override_IfResult3 = Context.Map.RandomVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult3 = Constant104;
	Override_IfResult3 = Constant105;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(Context.Map.Constants.Grande.RandomVector.RandomSeed, Mode_IfResult3, Override_IfResult3, Context.Map.RandomVector.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	float Result126 = dot(RandomVector_NF_TransformVector_Grande_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D);
	float Result127 = sign(Result126);
	float3 Result128 = Result127 * RandomUnitVector_Func_Output_UnitVector3D;
	float3 Vector_IfResult1;
	if(Context.Map.RandomVector.ConstraintoAxis)
	{
	Vector_IfResult1 = Result128;
	}
	else
	{
	Vector_IfResult1 = RandomUnitVector_Func_Output_UnitVector3D;
	}
	float3 Result129 = Context.Map.RandomVector.VectorScale * Vector_IfResult1;
	Out_RandomVector = Result129;
}

void RandomVector001_NF_TransformVector_Grande_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant126 = true;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant126, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result130 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult2 = In_InVector;
	}
	else
	{
	Vector_IfResult2 = Result130;
	}
	Out_OutVector = Vector_IfResult2;
}

void RandomVector001_Grande_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	bool Constant122 = false;
	Context.Map.RandomVector001.ConstraintoAxis = Constant122;
	int Constant123 = 2;
	int Constant124 = 0;
	bool Constant125 = false;
	float3 RandomVector001_NF_TransformVector_Grande_Func_Output_OutVector;
	RandomVector001_NF_TransformVector_Grande_Func_(Context.Map.Constants.Grande.RandomVector001.ConstraintVector, Constant123, Constant124, Constant125, RandomVector001_NF_TransformVector_Grande_Func_Output_OutVector, Context);
	bool Constant127 = false;
	Context.Map.RandomVector001.OverrideRandomness = Constant127;
	int Constant128 = 0;
	Context.Map.RandomVector001.RandomnessMode = Constant128;
	bool Constant129 = false;
	Context.Map.RandomVector001.OverrideSeed = Constant129;
	bool Constant130 = false;
	Context.Map.RandomVector001.FixedRandomSeed = Constant130;
	int Constant131 = 0;
	bool Constant132 = false;
	int Mode_IfResult4;
	bool Override_IfResult4;
	if(Context.Map.RandomVector001.OverrideRandomness)
	{
	Mode_IfResult4 = Context.Map.RandomVector001.RandomnessMode;
	Override_IfResult4 = Context.Map.RandomVector001.OverrideSeed;
	}
	else
	{
	Mode_IfResult4 = Constant131;
	Override_IfResult4 = Constant132;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D1;
	float2 RandomUnitVector_Func_Output_UnitVector2D1;
	RandomUnitVector_Func_(Context.Map.Constants.Grande.RandomVector001.RandomSeed, Mode_IfResult4, Override_IfResult4, Context.Map.RandomVector001.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D1, RandomUnitVector_Func_Output_UnitVector2D1, Context);
	float Result131 = dot(RandomVector001_NF_TransformVector_Grande_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D1);
	float Result132 = sign(Result131);
	float3 Result133 = Result132 * RandomUnitVector_Func_Output_UnitVector3D1;
	float3 Vector_IfResult3;
	if(Context.Map.RandomVector001.ConstraintoAxis)
	{
	Vector_IfResult3 = Result133;
	}
	else
	{
	Vector_IfResult3 = RandomUnitVector_Func_Output_UnitVector3D1;
	}
	float3 Result134 = Context.Map.RandomVector001.VectorScale * Vector_IfResult3;
	Out_RandomVector = Result134;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant139 = (0);
	bool Constant140 = false;
	int Constant141 = 0;
	int Constant142 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo4;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms4;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant139, In_OverrideSeed, Constant141, Constant142, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo4, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms4, Context);
	float3 Result135 = In_Max - In_Min;
	int Seed14;
	int Seed24;
	int Seed34;
	Seed14 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo4.Seed1;
	Seed24 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo4.Seed2;
	Seed34 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo4.Seed3;
	float3 Result136 = rand_float(Result135, Seed14, Seed24, Seed34);
	float3 Result137 = rand_float(Result135);
	float3 Random_IfResult4;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms4)
	{
	Random_IfResult4 = Result136;
	}
	else
	{
	Random_IfResult4 = Result137;
	}
	float3 Result138 = In_Min + Random_IfResult4;
	Out_Result = Result138;
}

void UniformRangedVector_Grande_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context)
{
	bool Constant133 = false;
	Context.Map.UniformRangedVector.OverrideRandomness = Constant133;
	int Constant134 = 0;
	Context.Map.UniformRangedVector.RandomnessMode = Constant134;
	bool Constant135 = false;
	Context.Map.UniformRangedVector.OverrideSeed = Constant135;
	bool Constant136 = false;
	Context.Map.UniformRangedVector.FixedRandomSeed = Constant136;
	int Constant137 = 0;
	bool Constant138 = false;
	int Mode_IfResult5;
	bool Override_IfResult5;
	if(Context.Map.UniformRangedVector.OverrideRandomness)
	{
	Mode_IfResult5 = Context.Map.UniformRangedVector.RandomnessMode;
	Override_IfResult5 = Context.Map.UniformRangedVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult5 = Constant137;
	Override_IfResult5 = Constant138;
	}
	float3 RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Context.Map.Constants.Grande.UniformRangedVector.Minimum, Context.Map.Constants.Grande.UniformRangedVector.Maximum, Context.Map.Constants.Grande.UniformRangedVector.RandomSeed, Mode_IfResult5, Override_IfResult5, Context.Map.UniformRangedVector.FixedRandomSeed, RandomRangeFloat_Func_Output_Result4, Context);
	Out_UniformRangedVector = RandomRangeFloat_Func_Output_Result4;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result140 = length(In_V);
	bool Result141 = NiagaraAll(Result140 < In_Threshold);
	float Result142 = length(In_Fallback);
	float3 Vector_IfResult4;
	float float_IfResult3;
	if(Result141)
	{
	Vector_IfResult4 = In_Fallback;
	float_IfResult3 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult4 = In_V;
	float_IfResult3 = Result140;
	}
	float3 Result143 = Vector_IfResult4 / float_IfResult3;
	float3 Vector_IfResult5;
	float float_IfResult4;
	if(Result141)
	{
	Vector_IfResult5 = In_Fallback;
	float_IfResult4 = Result142;
	}
	else
	{
	Vector_IfResult5 = Result143;
	float_IfResult4 = float_IfResult3;
	}
	Out_Direction = Vector_IfResult5;
	Out_Length = float_IfResult4;
	Out_BelowThreshold = Result141;
}

void BeamEmitterSetup_NF_TransformVector_Grande_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant149 = true;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant149, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result144 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult6;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult6 = In_InVector;
	}
	else
	{
	Vector_IfResult6 = Result144;
	}
	Out_OutVector = Vector_IfResult6;
}

void BeamEmitterSetup_Grande_Func_(inout FSimulationContext Context)
{
	float3 Result139 = Context.Map.BeamEmitterSetup.BeamStart - Context.Map.BeamEmitterSetup.BeamEnd;
	float3 Constant143 = float3(0,0,1);
	float Constant144 = 1e-05;
	float Constant145 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result139, Constant143, Constant144, Constant145, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	int Constant146 = 2;
	int Constant147 = 0;
	bool Constant148 = false;
	float3 BeamEmitterSetup_NF_TransformVector_Grande_Func_Output_OutVector;
	BeamEmitterSetup_NF_TransformVector_Grande_Func_(Context.Map.BeamEmitterSetup.BeamEnd, Constant146, Constant147, Constant148, BeamEmitterSetup_NF_TransformVector_Grande_Func_Output_OutVector, Context);
	float3 Result145 = Context.Map.BeamEmitterSetup.BeamStart + BeamEmitterSetup_NF_TransformVector_Grande_Func_Output_OutVector;
	Context.Map.Local.BeamEmitterSetup.BeamStart = Context.Map.BeamEmitterSetup.BeamStart;
	Context.Map.Local.BeamEmitterSetup.BeamStartEndLength = DirectionAndLengthSafe_Func_Output_Length;
	Context.Map.Local.BeamEmitterSetup.BeamEnd = Result145;
	bool Constant150 = false;
	Context.Map.BeamEmitterSetup.AbsoluteStartTangent = Constant150;
	float3 Result146 = Context.Map.BeamEmitterSetup.BeamStartTangent * Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	float3 Result147 = Context.Map.Local.BeamEmitterSetup.BeamStart + Result146;
	float3 Vector_IfResult7;
	if(Context.Map.BeamEmitterSetup.AbsoluteStartTangent)
	{
	Vector_IfResult7 = Context.Map.BeamEmitterSetup.BeamStartTangent;
	}
	else
	{
	Vector_IfResult7 = Result147;
	}
	bool Constant151 = false;
	Context.Map.BeamEmitterSetup.AbsoluteEndTangent = Constant151;
	float3 Result148 = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength * Context.Map.BeamEmitterSetup.BeamEndTangent;
	float3 Result149 = Result148 + Context.Map.Local.BeamEmitterSetup.BeamEnd;
	float3 Vector_IfResult8;
	if(Context.Map.BeamEmitterSetup.AbsoluteEndTangent)
	{
	Vector_IfResult8 = Context.Map.BeamEmitterSetup.BeamEndTangent;
	}
	else
	{
	Vector_IfResult8 = Result149;
	}
	Context.Map.Local.BeamEmitterSetup.BeamStartTangent = Vector_IfResult7;
	Context.Map.Local.BeamEmitterSetup.BeamEndTangent = Vector_IfResult8;
	float3 Result150 = Context.Map.Local.BeamEmitterSetup.BeamEnd - Context.Map.Local.BeamEmitterSetup.BeamStart;
	float3 Constant152 = float3(0,0,1);
	float Constant153 = 1e-05;
	float Constant154 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result150, Constant152, Constant153, Constant154, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	Context.Map.Grande.BeamStart = Context.Map.Local.BeamEmitterSetup.BeamStart;
	Context.Map.Grande.BeamStartTangent = Context.Map.Local.BeamEmitterSetup.BeamStartTangent;
	Context.Map.Grande.BeamEnd = Context.Map.Local.BeamEmitterSetup.BeamEnd;
	Context.Map.Grande.BeamEndTangent = Context.Map.Local.BeamEmitterSetup.BeamEndTangent;
	Context.Map.Grande.UseBeamTangents = Context.Map.BeamEmitterSetup.UseBeamTangents;
	Context.Map.Grande.BeamStartEndLength = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	Context.Map.Grande.BeamVector = Result150;
	Context.Map.Grande.BeamDirection = DirectionAndLengthSafe_Func_Output_Direction1;
	bool Result151 = NiagaraAll(Context.Map.Grande.LoopCount > Context.Map.Grande.BeamID);
	int Constant155 = -1;
	int int32_IfResult;
	if(Result151)
	{
	int32_IfResult = Context.Map.Grande.LoopCount;
	}
	else
	{
	int32_IfResult = Constant155;
	}
	Context.Map.Grande.BeamID = int32_IfResult;
}

void Grande_Func_(inout FSimulationContext Context)
{
	EnterStatScope(3 );
	EmitterState_Grande_Func_(Context);
	ExitStatScope( );
	int UniformRangedInt_Grande_Func_Output_UniformRangedInt;
	UniformRangedInt_Grande_Func_(UniformRangedInt_Grande_Func_Output_UniformRangedInt, Context);
	Context.Map.SpawnBurst_Instantaneous.SpawnCount = UniformRangedInt_Grande_Func_Output_UniformRangedInt;
	EnterStatScope(4 );
	SpawnBurst_Instantaneous_Grande_Func_(Context);
	ExitStatScope( );
	float UniformRangedFloat001_Grande_Func_Output_UniformRangedFloat;
	UniformRangedFloat001_Grande_Func_(UniformRangedFloat001_Grande_Func_Output_UniformRangedFloat, Context);
	float UniformRangedFloat002_Grande_Func_Output_UniformRangedFloat;
	UniformRangedFloat002_Grande_Func_(UniformRangedFloat002_Grande_Func_Output_UniformRangedFloat, Context);
	Context.Map.RandomVector.VectorScale = UniformRangedFloat001_Grande_Func_Output_UniformRangedFloat;
	Context.Map.RandomVector001.VectorScale = UniformRangedFloat002_Grande_Func_Output_UniformRangedFloat;
	float3 Constant87 = float3(0,0,0);
	bool Constant88 = true;
	float3 RandomVector_Grande_Func_Output_RandomVector;
	RandomVector_Grande_Func_(RandomVector_Grande_Func_Output_RandomVector, Context);
	float3 RandomVector001_Grande_Func_Output_RandomVector;
	RandomVector001_Grande_Func_(RandomVector001_Grande_Func_Output_RandomVector, Context);
	float3 UniformRangedVector_Grande_Func_Output_UniformRangedVector;
	UniformRangedVector_Grande_Func_(UniformRangedVector_Grande_Func_Output_UniformRangedVector, Context);
	Context.Map.BeamEmitterSetup.BeamStart = Constant87;
	Context.Map.BeamEmitterSetup.UseBeamTangents = Constant88;
	Context.Map.BeamEmitterSetup.BeamStartTangent = RandomVector_Grande_Func_Output_RandomVector;
	Context.Map.BeamEmitterSetup.BeamEndTangent = RandomVector001_Grande_Func_Output_RandomVector;
	Context.Map.BeamEmitterSetup.BeamEnd = UniformRangedVector_Grande_Func_Output_UniformRangedVector;
	EnterStatScope(5 );
	BeamEmitterSetup_Grande_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = (false);
	Context.Map.Local.SystemState.LoopCountIncreased = Constant;
	bool Constant1 = false;
	Context.Map.SystemState.RecalculateDurationEachLoop = Constant1;
	int Constant2 = 0;
	Context.Map.Transient.ScalabilityExecutionState = Constant2;
	EnterStatScope(1 );
	SystemState_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Grande_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(6 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = InputDataInt(0, 0);
	Context.Map.Grande.Age = InputDataFloat(0, 1);
	Context.Map.Grande.BeamDirection.x = InputDataFloat(0, 2);
	Context.Map.Grande.BeamDirection.y = InputDataFloat(0, 3);
	Context.Map.Grande.BeamDirection.z = InputDataFloat(0, 4);
	Context.Map.Grande.BeamEnd.x = InputDataFloat(0, 5);
	Context.Map.Grande.BeamEnd.y = InputDataFloat(0, 6);
	Context.Map.Grande.BeamEnd.z = InputDataFloat(0, 7);
	Context.Map.Grande.BeamEndTangent.x = InputDataFloat(0, 8);
	Context.Map.Grande.BeamEndTangent.y = InputDataFloat(0, 9);
	Context.Map.Grande.BeamEndTangent.z = InputDataFloat(0, 10);
	Context.Map.Grande.BeamID = InputDataInt(0, 11);
	Context.Map.Grande.BeamStart.x = InputDataFloat(0, 12);
	Context.Map.Grande.BeamStart.y = InputDataFloat(0, 13);
	Context.Map.Grande.BeamStart.z = InputDataFloat(0, 14);
	Context.Map.Grande.BeamStartEndLength = InputDataFloat(0, 15);
	Context.Map.Grande.BeamStartTangent.x = InputDataFloat(0, 16);
	Context.Map.Grande.BeamStartTangent.y = InputDataFloat(0, 17);
	Context.Map.Grande.BeamStartTangent.z = InputDataFloat(0, 18);
	Context.Map.Grande.BeamVector.x = InputDataFloat(0, 19);
	Context.Map.Grande.BeamVector.y = InputDataFloat(0, 20);
	Context.Map.Grande.BeamVector.z = InputDataFloat(0, 21);
	Context.Map.Grande.CurrentLoopDuration = InputDataFloat(0, 22);
	Context.Map.Grande.ExecutionState = InputDataInt(0, 23);
	Context.Map.Grande.ExecutionStateSource = InputDataInt(0, 24);
	Context.Map.Grande.LocalSpace = InputDataBool(0, 25);
	Context.Map.Grande.LoopCount = InputDataInt(0, 26);
	Context.Map.Grande.LoopedAge = InputDataFloat(0, 27);
	Context.Map.Grande.NormalizedLoopAge = InputDataFloat(0, 28);
	Context.Map.Grande.Scalability.DistanceFraction = InputDataFloat(0, 29);
	Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Grande.UseBeamTangents = InputDataBool(0, 34);
	Context.Map.System.Age = InputDataFloat(0, 35);
	Context.Map.System.bCompleteOnInactive = InputDataBool(0, 36);
	Context.Map.System.CurrentLoopDuration = InputDataFloat(0, 37);
	Context.Map.System.ExecutionState = InputDataInt(0, 38);
	Context.Map.System.ExecutionStateSource = InputDataInt(0, 39);
	Context.Map.System.LoopCount = InputDataInt(0, 40);
	Context.Map.System.LoopedAge = InputDataFloat(0, 41);
	Context.Map.System.NormalizedLoopAge = InputDataFloat(0, 42);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.Grande.NumParticles = InputDataInt(1, 1);
	Context.Map.Engine.Grande.SpawnCountScale = InputDataFloat(1, 2);
	Context.Map.Engine.Owner.ExecutionState = InputDataInt(1, 3);
	Context.Map.Engine.Owner.LODDistanceFraction = InputDataFloat(1, 4);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][0] = InputDataFloat(1, 5);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][1] = InputDataFloat(1, 6);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][2] = InputDataFloat(1, 7);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][3] = InputDataFloat(1, 8);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][0] = InputDataFloat(1, 9);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][1] = InputDataFloat(1, 10);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][2] = InputDataFloat(1, 11);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][3] = InputDataFloat(1, 12);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][0] = InputDataFloat(1, 13);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][1] = InputDataFloat(1, 14);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][2] = InputDataFloat(1, 15);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][3] = InputDataFloat(1, 16);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][0] = InputDataFloat(1, 17);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][1] = InputDataFloat(1, 18);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][2] = InputDataFloat(1, 19);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][3] = InputDataFloat(1, 20);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][0] = InputDataFloat(1, 21);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][1] = InputDataFloat(1, 22);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][2] = InputDataFloat(1, 23);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][3] = InputDataFloat(1, 24);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][0] = InputDataFloat(1, 25);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][1] = InputDataFloat(1, 26);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][2] = InputDataFloat(1, 27);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][3] = InputDataFloat(1, 28);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][0] = InputDataFloat(1, 29);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][1] = InputDataFloat(1, 30);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][2] = InputDataFloat(1, 31);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][3] = InputDataFloat(1, 32);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][0] = InputDataFloat(1, 33);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][1] = InputDataFloat(1, 34);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][2] = InputDataFloat(1, 35);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][3] = InputDataFloat(1, 36);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][0] = InputDataFloat(1, 37);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][1] = InputDataFloat(1, 38);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][2] = InputDataFloat(1, 39);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][3] = InputDataFloat(1, 40);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][0] = InputDataFloat(1, 41);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][1] = InputDataFloat(1, 42);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][2] = InputDataFloat(1, 43);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][3] = InputDataFloat(1, 44);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][0] = InputDataFloat(1, 45);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][1] = InputDataFloat(1, 46);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][2] = InputDataFloat(1, 47);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][3] = InputDataFloat(1, 48);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][0] = InputDataFloat(1, 49);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][1] = InputDataFloat(1, 50);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][2] = InputDataFloat(1, 51);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][3] = InputDataFloat(1, 52);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][0] = InputDataFloat(1, 53);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][1] = InputDataFloat(1, 54);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][2] = InputDataFloat(1, 55);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][3] = InputDataFloat(1, 56);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][0] = InputDataFloat(1, 57);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][1] = InputDataFloat(1, 58);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][2] = InputDataFloat(1, 59);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][3] = InputDataFloat(1, 60);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][0] = InputDataFloat(1, 61);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][1] = InputDataFloat(1, 62);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][2] = InputDataFloat(1, 63);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][3] = InputDataFloat(1, 64);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][0] = InputDataFloat(1, 65);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][1] = InputDataFloat(1, 66);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][2] = InputDataFloat(1, 67);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][3] = InputDataFloat(1, 68);
	Context.Map.Engine.System.TickCount = InputDataInt(1, 69);
	Context.Map.User.Grande.RandomSeed = InputDataInt(1, 70);
	Context.Map.Constants.SystemState.LoopDelay = Constants_SystemState_LoopDelay;
	Context.Map.Constants.SystemState.LoopDuration = Constants_SystemState_LoopDuration;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Grande.EmitterState.LoopDuration = Constants_Grande_EmitterState_LoopDuration;
	Context.Map.Constants.Grande.EmitterState.LoopDelay = Constants_Grande_EmitterState_LoopDelay;
	Context.Map.Constants.Grande.UniformRangedInt.Minimum = Constants_Grande_UniformRangedInt_Minimum;
	Context.Map.Constants.Grande.UniformRangedInt.Maximum = Constants_Grande_UniformRangedInt_Maximum;
	Context.Map.Constants.Grande.UniformRangedInt.RandomSeed = Constants_Grande_UniformRangedInt_RandomSeed;
	Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnTime = Constants_Grande_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnGroup = Constants_Grande_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.Grande.SpawnBurst_Instantaneous.SpawnProbability = Constants_Grande_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Constants.Grande.UniformRangedFloat001.Minimum = Constants_Grande_UniformRangedFloat001_Minimum;
	Context.Map.Constants.Grande.UniformRangedFloat001.Maximum = Constants_Grande_UniformRangedFloat001_Maximum;
	Context.Map.Constants.Grande.UniformRangedFloat001.RandomSeed = Constants_Grande_UniformRangedFloat001_RandomSeed;
	Context.Map.Constants.Grande.UniformRangedFloat002.Minimum = Constants_Grande_UniformRangedFloat002_Minimum;
	Context.Map.Constants.Grande.UniformRangedFloat002.Maximum = Constants_Grande_UniformRangedFloat002_Maximum;
	Context.Map.Constants.Grande.UniformRangedFloat002.RandomSeed = Constants_Grande_UniformRangedFloat002_RandomSeed;
	Context.Map.Constants.Grande.RandomVector.ConstraintVector = Constants_Grande_RandomVector_ConstraintVector;
	Context.Map.Constants.Grande.RandomVector.RandomSeed = Constants_Grande_RandomVector_RandomSeed;
	Context.Map.Constants.Grande.RandomVector001.ConstraintVector = Constants_Grande_RandomVector001_ConstraintVector;
	Context.Map.Constants.Grande.RandomVector001.RandomSeed = Constants_Grande_RandomVector001_RandomSeed;
	Context.Map.Constants.Grande.UniformRangedVector.Minimum = Constants_Grande_UniformRangedVector_Minimum;
	Context.Map.Constants.Grande.UniformRangedVector.Maximum = Constants_Grande_UniformRangedVector_Maximum;
	Context.Map.Constants.Grande.UniformRangedVector.RandomSeed = Constants_Grande_UniformRangedVector_RandomSeed;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Grande.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Grande.BeamDirection.x);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Grande.BeamDirection.y);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Grande.BeamDirection.z);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Grande.BeamEnd.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Grande.BeamEnd.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Grande.BeamEnd.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Grande.BeamEndTangent.x);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Grande.BeamEndTangent.y);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Grande.BeamEndTangent.z);
	OutputDataInt(0, 11, TmpWriteIndex, Context.Map.Grande.BeamID);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Grande.BeamStart.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Grande.BeamStart.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Grande.BeamStart.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Grande.BeamStartEndLength);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Grande.BeamStartTangent.x);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Grande.BeamStartTangent.y);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Grande.BeamStartTangent.z);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Grande.BeamVector.x);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Grande.BeamVector.y);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Grande.BeamVector.z);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Grande.CurrentLoopDuration);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.Grande.ExecutionState);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.Grande.ExecutionStateSource);
	OutputDataBool(0, 25, TmpWriteIndex, Context.Map.Grande.LocalSpace);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Grande.LoopCount);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Grande.LoopedAge);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Grande.NormalizedLoopAge);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Grande.Scalability.DistanceFraction);
	OutputDataInt(0, 30, TmpWriteIndex, Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 33, TmpWriteIndex, Context.Map.Grande.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 34, TmpWriteIndex, Context.Map.Grande.UseBeamTangents);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 36, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 38, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 39, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 40, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/

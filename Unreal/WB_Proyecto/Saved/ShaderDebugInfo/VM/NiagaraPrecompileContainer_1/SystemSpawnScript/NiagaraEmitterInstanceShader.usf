#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	int Emitter_RandomSeed;
}

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_UniformRangedVector001
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedInt
{
	bool FixedRandomSeed;
	int Maximum;
	int Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	bool SpawningbCanEverSpawn;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleBeamWidth
{
	float BeamWidthScale;
};

struct FParamMap0_RandomVector001
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float RibbonWidth;
};

struct FParamMap0_Particles
{
	float Age;
	float3 BeamSplineBinormal;
	float3 BeamSplineNormal;
	float3 BeamSplineTangent;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float JitterDelayTimer;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	NiagaraID RibbonID;
	float RibbonLinkOrder;
	float RibbonTwist;
	float RibbonWidth;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SpawnBeam
{
	float3 BeamDirection;
	float3 BeamVector;
	float NormalizedExecIndex;
	float StartEndVecLength;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_JitterPosition
{
	float3 ModuleJitterOffset;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_CurlNoiseForce
{
	float AgeAdvancement;
	float DeterministicOffset;
	float Falloff;
	float3 SampledNoise;
	float3 SamplePosition;
};

struct FParamMap0_Local_BeamEmitterSetup
{
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
};

struct FParamMap0_Local
{
	FParamMap0_Local_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Local_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_JitterPosition JitterPosition;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnBeam SpawnBeam;
};

struct FParamMap0_JitterPosition
{
	float JitterAmount;
	float JitterDelay;
	float3 JitterOffset;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_Owner
{
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
};

struct FParamMap0_Engine_Empty004
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Empty003
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Empty002
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Empty001
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Empty
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	FParamMap0_Engine_Empty Empty;
	FParamMap0_Engine_Empty001 Empty001;
	FParamMap0_Engine_Empty002 Empty002;
	FParamMap0_Engine_Empty003 Empty003;
	FParamMap0_Engine_Empty004 Empty004;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	float Time;
};

struct FParamMap0_Empty_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Empty_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Empty004_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Empty004_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Empty004
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Empty004_Scalability Scalability;
	FParamMap0_Empty004_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Empty003_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Empty003_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Empty003
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Empty003_Scalability Scalability;
	FParamMap0_Empty003_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Empty002_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Empty002_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Empty002
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Empty002_Scalability Scalability;
	FParamMap0_Empty002_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Empty001_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Empty001_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Empty001
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Empty001_Scalability Scalability;
	FParamMap0_Empty001_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Empty
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Empty_Scalability Scalability;
	FParamMap0_Empty_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float3 CurlNoiseConeMaskAxis;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float NoiseStrength;
	float3 PanNoiseField;
	int RandomSeed;
	float3 SamplePosition;
};

struct FParamMap0_BeamWidth
{
	float BeamTwistAmount;
	float BeamWidth;
};

struct FParamMap0_BeamEmitterSetup
{
	bool AbsoluteEndTangent;
	bool AbsoluteStartTangent;
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float3 BeamStartTangent;
	bool UseBeamTangents;
};

struct FParamMap0
{
	FParamMap0_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_BeamWidth BeamWidth;
	FParamMap0_CurlNoiseForce CurlNoiseForce;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Empty Empty;
	FParamMap0_Empty001 Empty001;
	FParamMap0_Empty002 Empty002;
	FParamMap0_Empty003 Empty003;
	FParamMap0_Empty004 Empty004;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_JitterPosition JitterPosition;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_RandomVector RandomVector;
	FParamMap0_RandomVector001 RandomVector001;
	FParamMap0_ScaleBeamWidth ScaleBeamWidth;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnBeam SpawnBeam;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_System System;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedInt UniformRangedInt;
	FParamMap0_UniformRangedVector UniformRangedVector;
	FParamMap0_UniformRangedVector001 UniformRangedVector001;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void Empty004_Func_(inout FSimulationContext Context);
void Empty003_Func_(inout FSimulationContext Context);
void Empty002_Func_(inout FSimulationContext Context);
void Empty001_Func_(inout FSimulationContext Context);
void Empty_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void Empty004_Func_(inout FSimulationContext Context)
{

}

void Empty003_Func_(inout FSimulationContext Context)
{

}

void Empty002_Func_(inout FSimulationContext Context)
{

}

void Empty001_Func_(inout FSimulationContext Context)
{

}

void Empty_Func_(inout FSimulationContext Context)
{

}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );

	int Constant = 0;
	Context.Map.Empty004.ExecutionState = Constant;
	float Constant1 = 0;
	Context.Map.Empty004.Age = Constant1;
	float Constant2 = 0;
	Context.Map.Empty004.CurrentLoopDuration = Constant2;
	float Constant3 = 0;
	Context.Map.Empty004.LoopedAge = Constant3;
	int Constant4 = 0;
	Context.Map.Empty004.LoopCount = Constant4;
	float Constant5 = (0.0);
	Context.Map.Empty004.NormalizedLoopAge = Constant5;
	float Constant6 = (0.0);
	Context.Map.Empty004.Scalability.DistanceFraction = Constant6;
	int Constant7 = 0;
	Context.Map.System.ExecutionState = Constant7;
	int Constant8 = 0;
	Context.Map.System.ExecutionStateSource = Constant8;
	int Constant9 = 0;
	Context.Map.Empty004.ExecutionStateSource = Constant9;
	NiagaraSpawnInfo Constant10 = (NiagaraSpawnInfo)0;
	Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst = Constant10;
	bool Constant11 = false;
	Context.Map.Empty004.LocalSpace = Constant11;
	float3 Constant12 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty004.BeamStart = Constant12;
	float3 Constant13 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty004.BeamStartTangent = Constant13;
	float3 Constant14 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty004.BeamEnd = Constant14;
	float3 Constant15 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty004.BeamEndTangent = Constant15;
	bool Constant16 = (false);
	Context.Map.Empty004.UseBeamTangents = Constant16;
	float Constant17 = (0.0);
	Context.Map.Empty004.BeamStartEndLength = Constant17;
	float3 Constant18 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty004.BeamVector = Constant18;
	float3 Constant19 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty004.BeamDirection = Constant19;
	int Constant20 = -1;
	Context.Map.Empty004.BeamID = Constant20;
	int Constant21 = 0;
	Context.Map.Empty003.ExecutionState = Constant21;
	float Constant22 = 0;
	Context.Map.Empty003.Age = Constant22;
	float Constant23 = 0;
	Context.Map.Empty003.CurrentLoopDuration = Constant23;
	float Constant24 = 0;
	Context.Map.Empty003.LoopedAge = Constant24;
	int Constant25 = 0;
	Context.Map.Empty003.LoopCount = Constant25;
	float Constant26 = (0.0);
	Context.Map.Empty003.NormalizedLoopAge = Constant26;
	float Constant27 = (0.0);
	Context.Map.Empty003.Scalability.DistanceFraction = Constant27;
	int Constant28 = 0;
	Context.Map.Empty003.ExecutionStateSource = Constant28;
	NiagaraSpawnInfo Constant29 = (NiagaraSpawnInfo)0;
	Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst = Constant29;
	bool Constant30 = false;
	Context.Map.Empty003.LocalSpace = Constant30;
	float3 Constant31 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty003.BeamStart = Constant31;
	float3 Constant32 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty003.BeamStartTangent = Constant32;
	float3 Constant33 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty003.BeamEnd = Constant33;
	float3 Constant34 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty003.BeamEndTangent = Constant34;
	bool Constant35 = (false);
	Context.Map.Empty003.UseBeamTangents = Constant35;
	float Constant36 = (0.0);
	Context.Map.Empty003.BeamStartEndLength = Constant36;
	float3 Constant37 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty003.BeamVector = Constant37;
	float3 Constant38 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty003.BeamDirection = Constant38;
	int Constant39 = -1;
	Context.Map.Empty003.BeamID = Constant39;
	int Constant40 = 0;
	Context.Map.Empty002.ExecutionState = Constant40;
	float Constant41 = 0;
	Context.Map.Empty002.Age = Constant41;
	float Constant42 = 0;
	Context.Map.Empty002.CurrentLoopDuration = Constant42;
	float Constant43 = 0;
	Context.Map.Empty002.LoopedAge = Constant43;
	int Constant44 = 0;
	Context.Map.Empty002.LoopCount = Constant44;
	float Constant45 = (0.0);
	Context.Map.Empty002.NormalizedLoopAge = Constant45;
	float Constant46 = (0.0);
	Context.Map.Empty002.Scalability.DistanceFraction = Constant46;
	int Constant47 = 0;
	Context.Map.Empty002.ExecutionStateSource = Constant47;
	NiagaraSpawnInfo Constant48 = (NiagaraSpawnInfo)0;
	Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst = Constant48;
	bool Constant49 = false;
	Context.Map.Empty002.LocalSpace = Constant49;
	float3 Constant50 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty002.BeamStart = Constant50;
	float3 Constant51 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty002.BeamStartTangent = Constant51;
	float3 Constant52 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty002.BeamEnd = Constant52;
	float3 Constant53 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty002.BeamEndTangent = Constant53;
	bool Constant54 = (false);
	Context.Map.Empty002.UseBeamTangents = Constant54;
	float Constant55 = (0.0);
	Context.Map.Empty002.BeamStartEndLength = Constant55;
	float3 Constant56 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty002.BeamVector = Constant56;
	float3 Constant57 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty002.BeamDirection = Constant57;
	int Constant58 = -1;
	Context.Map.Empty002.BeamID = Constant58;
	int Constant59 = 0;
	Context.Map.Empty001.ExecutionState = Constant59;
	float Constant60 = 0;
	Context.Map.Empty001.Age = Constant60;
	float Constant61 = 0;
	Context.Map.Empty001.CurrentLoopDuration = Constant61;
	float Constant62 = 0;
	Context.Map.Empty001.LoopedAge = Constant62;
	int Constant63 = 0;
	Context.Map.Empty001.LoopCount = Constant63;
	float Constant64 = (0.0);
	Context.Map.Empty001.NormalizedLoopAge = Constant64;
	float Constant65 = (0.0);
	Context.Map.Empty001.Scalability.DistanceFraction = Constant65;
	int Constant66 = 0;
	Context.Map.Empty001.ExecutionStateSource = Constant66;
	NiagaraSpawnInfo Constant67 = (NiagaraSpawnInfo)0;
	Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst = Constant67;
	bool Constant68 = false;
	Context.Map.Empty001.LocalSpace = Constant68;
	float3 Constant69 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty001.BeamStart = Constant69;
	float3 Constant70 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty001.BeamStartTangent = Constant70;
	float3 Constant71 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty001.BeamEnd = Constant71;
	float3 Constant72 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty001.BeamEndTangent = Constant72;
	bool Constant73 = (false);
	Context.Map.Empty001.UseBeamTangents = Constant73;
	float Constant74 = (0.0);
	Context.Map.Empty001.BeamStartEndLength = Constant74;
	float3 Constant75 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty001.BeamVector = Constant75;
	float3 Constant76 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty001.BeamDirection = Constant76;
	int Constant77 = -1;
	Context.Map.Empty001.BeamID = Constant77;
	int Constant78 = 0;
	Context.Map.Empty.ExecutionState = Constant78;
	float Constant79 = 0;
	Context.Map.Empty.Age = Constant79;
	float Constant80 = 0;
	Context.Map.Empty.CurrentLoopDuration = Constant80;
	float Constant81 = 0;
	Context.Map.Empty.LoopedAge = Constant81;
	int Constant82 = 0;
	Context.Map.Empty.LoopCount = Constant82;
	float Constant83 = (0.0);
	Context.Map.Empty.NormalizedLoopAge = Constant83;
	float Constant84 = (0.0);
	Context.Map.Empty.Scalability.DistanceFraction = Constant84;
	int Constant85 = 0;
	Context.Map.Empty.ExecutionStateSource = Constant85;
	NiagaraSpawnInfo Constant86 = (NiagaraSpawnInfo)0;
	Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst = Constant86;
	bool Constant87 = false;
	Context.Map.Empty.LocalSpace = Constant87;
	float3 Constant88 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty.BeamStart = Constant88;
	float3 Constant89 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty.BeamStartTangent = Constant89;
	float3 Constant90 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty.BeamEnd = Constant90;
	float3 Constant91 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty.BeamEndTangent = Constant91;
	bool Constant92 = (false);
	Context.Map.Empty.UseBeamTangents = Constant92;
	float Constant93 = (0.0);
	Context.Map.Empty.BeamStartEndLength = Constant93;
	float3 Constant94 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty.BeamVector = Constant94;
	float3 Constant95 = float3(0.0, 0.0, 0.0);
	Context.Map.Empty.BeamDirection = Constant95;
	int Constant96 = -1;
	Context.Map.Empty.BeamID = Constant96;
	float Constant97 = 0;
	Context.Map.System.Age = Constant97;
	float Constant98 = 0;
	Context.Map.System.CurrentLoopDuration = Constant98;
	float Constant99 = 0;
	Context.Map.System.LoopedAge = Constant99;
	int Constant100 = 0;
	Context.Map.System.LoopCount = Constant100;
	float Constant101 = (0.0);
	Context.Map.System.NormalizedLoopAge = Constant101;
	bool Constant102 = false;
	Context.Map.System.bCompleteOnInactive = Constant102;

	EnterStatScope(1 );
	Empty004_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Empty003_Func_(Context);
	ExitStatScope( );
	EnterStatScope(3 );
	Empty002_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	Empty001_Func_(Context);
	ExitStatScope( );
	EnterStatScope(5 );
	Empty_Func_(Context);
	ExitStatScope( );




	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(6 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = 0;
	Context.Map.Empty.Age = 0.0f;
	Context.Map.Empty.BeamDirection.x = 0.0f;
	Context.Map.Empty.BeamDirection.y = 0.0f;
	Context.Map.Empty.BeamDirection.z = 0.0f;
	Context.Map.Empty.BeamEnd.x = 0.0f;
	Context.Map.Empty.BeamEnd.y = 0.0f;
	Context.Map.Empty.BeamEnd.z = 0.0f;
	Context.Map.Empty.BeamEndTangent.x = 0.0f;
	Context.Map.Empty.BeamEndTangent.y = 0.0f;
	Context.Map.Empty.BeamEndTangent.z = 0.0f;
	Context.Map.Empty.BeamID = 0;
	Context.Map.Empty.BeamStart.x = 0.0f;
	Context.Map.Empty.BeamStart.y = 0.0f;
	Context.Map.Empty.BeamStart.z = 0.0f;
	Context.Map.Empty.BeamStartEndLength = 0.0f;
	Context.Map.Empty.BeamStartTangent.x = 0.0f;
	Context.Map.Empty.BeamStartTangent.y = 0.0f;
	Context.Map.Empty.BeamStartTangent.z = 0.0f;
	Context.Map.Empty.BeamVector.x = 0.0f;
	Context.Map.Empty.BeamVector.y = 0.0f;
	Context.Map.Empty.BeamVector.z = 0.0f;
	Context.Map.Empty.CurrentLoopDuration = 0.0f;
	Context.Map.Empty.ExecutionState = 0;
	Context.Map.Empty.ExecutionStateSource = 0;
	Context.Map.Empty.LocalSpace = false;
	Context.Map.Empty.LoopCount = 0;
	Context.Map.Empty.LoopedAge = 0.0f;
	Context.Map.Empty.NormalizedLoopAge = 0.0f;
	Context.Map.Empty.Scalability.DistanceFraction = 0.0f;
	Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Empty.UseBeamTangents = false;
	Context.Map.Empty001.Age = 0.0f;
	Context.Map.Empty001.BeamDirection.x = 0.0f;
	Context.Map.Empty001.BeamDirection.y = 0.0f;
	Context.Map.Empty001.BeamDirection.z = 0.0f;
	Context.Map.Empty001.BeamEnd.x = 0.0f;
	Context.Map.Empty001.BeamEnd.y = 0.0f;
	Context.Map.Empty001.BeamEnd.z = 0.0f;
	Context.Map.Empty001.BeamEndTangent.x = 0.0f;
	Context.Map.Empty001.BeamEndTangent.y = 0.0f;
	Context.Map.Empty001.BeamEndTangent.z = 0.0f;
	Context.Map.Empty001.BeamID = 0;
	Context.Map.Empty001.BeamStart.x = 0.0f;
	Context.Map.Empty001.BeamStart.y = 0.0f;
	Context.Map.Empty001.BeamStart.z = 0.0f;
	Context.Map.Empty001.BeamStartEndLength = 0.0f;
	Context.Map.Empty001.BeamStartTangent.x = 0.0f;
	Context.Map.Empty001.BeamStartTangent.y = 0.0f;
	Context.Map.Empty001.BeamStartTangent.z = 0.0f;
	Context.Map.Empty001.BeamVector.x = 0.0f;
	Context.Map.Empty001.BeamVector.y = 0.0f;
	Context.Map.Empty001.BeamVector.z = 0.0f;
	Context.Map.Empty001.CurrentLoopDuration = 0.0f;
	Context.Map.Empty001.ExecutionState = 0;
	Context.Map.Empty001.ExecutionStateSource = 0;
	Context.Map.Empty001.LocalSpace = false;
	Context.Map.Empty001.LoopCount = 0;
	Context.Map.Empty001.LoopedAge = 0.0f;
	Context.Map.Empty001.NormalizedLoopAge = 0.0f;
	Context.Map.Empty001.Scalability.DistanceFraction = 0.0f;
	Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Empty001.UseBeamTangents = false;
	Context.Map.Empty002.Age = 0.0f;
	Context.Map.Empty002.BeamDirection.x = 0.0f;
	Context.Map.Empty002.BeamDirection.y = 0.0f;
	Context.Map.Empty002.BeamDirection.z = 0.0f;
	Context.Map.Empty002.BeamEnd.x = 0.0f;
	Context.Map.Empty002.BeamEnd.y = 0.0f;
	Context.Map.Empty002.BeamEnd.z = 0.0f;
	Context.Map.Empty002.BeamEndTangent.x = 0.0f;
	Context.Map.Empty002.BeamEndTangent.y = 0.0f;
	Context.Map.Empty002.BeamEndTangent.z = 0.0f;
	Context.Map.Empty002.BeamID = 0;
	Context.Map.Empty002.BeamStart.x = 0.0f;
	Context.Map.Empty002.BeamStart.y = 0.0f;
	Context.Map.Empty002.BeamStart.z = 0.0f;
	Context.Map.Empty002.BeamStartEndLength = 0.0f;
	Context.Map.Empty002.BeamStartTangent.x = 0.0f;
	Context.Map.Empty002.BeamStartTangent.y = 0.0f;
	Context.Map.Empty002.BeamStartTangent.z = 0.0f;
	Context.Map.Empty002.BeamVector.x = 0.0f;
	Context.Map.Empty002.BeamVector.y = 0.0f;
	Context.Map.Empty002.BeamVector.z = 0.0f;
	Context.Map.Empty002.CurrentLoopDuration = 0.0f;
	Context.Map.Empty002.ExecutionState = 0;
	Context.Map.Empty002.ExecutionStateSource = 0;
	Context.Map.Empty002.LocalSpace = false;
	Context.Map.Empty002.LoopCount = 0;
	Context.Map.Empty002.LoopedAge = 0.0f;
	Context.Map.Empty002.NormalizedLoopAge = 0.0f;
	Context.Map.Empty002.Scalability.DistanceFraction = 0.0f;
	Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Empty002.UseBeamTangents = false;
	Context.Map.Empty003.Age = 0.0f;
	Context.Map.Empty003.BeamDirection.x = 0.0f;
	Context.Map.Empty003.BeamDirection.y = 0.0f;
	Context.Map.Empty003.BeamDirection.z = 0.0f;
	Context.Map.Empty003.BeamEnd.x = 0.0f;
	Context.Map.Empty003.BeamEnd.y = 0.0f;
	Context.Map.Empty003.BeamEnd.z = 0.0f;
	Context.Map.Empty003.BeamEndTangent.x = 0.0f;
	Context.Map.Empty003.BeamEndTangent.y = 0.0f;
	Context.Map.Empty003.BeamEndTangent.z = 0.0f;
	Context.Map.Empty003.BeamID = 0;
	Context.Map.Empty003.BeamStart.x = 0.0f;
	Context.Map.Empty003.BeamStart.y = 0.0f;
	Context.Map.Empty003.BeamStart.z = 0.0f;
	Context.Map.Empty003.BeamStartEndLength = 0.0f;
	Context.Map.Empty003.BeamStartTangent.x = 0.0f;
	Context.Map.Empty003.BeamStartTangent.y = 0.0f;
	Context.Map.Empty003.BeamStartTangent.z = 0.0f;
	Context.Map.Empty003.BeamVector.x = 0.0f;
	Context.Map.Empty003.BeamVector.y = 0.0f;
	Context.Map.Empty003.BeamVector.z = 0.0f;
	Context.Map.Empty003.CurrentLoopDuration = 0.0f;
	Context.Map.Empty003.ExecutionState = 0;
	Context.Map.Empty003.ExecutionStateSource = 0;
	Context.Map.Empty003.LocalSpace = false;
	Context.Map.Empty003.LoopCount = 0;
	Context.Map.Empty003.LoopedAge = 0.0f;
	Context.Map.Empty003.NormalizedLoopAge = 0.0f;
	Context.Map.Empty003.Scalability.DistanceFraction = 0.0f;
	Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Empty003.UseBeamTangents = false;
	Context.Map.Empty004.Age = 0.0f;
	Context.Map.Empty004.BeamDirection.x = 0.0f;
	Context.Map.Empty004.BeamDirection.y = 0.0f;
	Context.Map.Empty004.BeamDirection.z = 0.0f;
	Context.Map.Empty004.BeamEnd.x = 0.0f;
	Context.Map.Empty004.BeamEnd.y = 0.0f;
	Context.Map.Empty004.BeamEnd.z = 0.0f;
	Context.Map.Empty004.BeamEndTangent.x = 0.0f;
	Context.Map.Empty004.BeamEndTangent.y = 0.0f;
	Context.Map.Empty004.BeamEndTangent.z = 0.0f;
	Context.Map.Empty004.BeamID = 0;
	Context.Map.Empty004.BeamStart.x = 0.0f;
	Context.Map.Empty004.BeamStart.y = 0.0f;
	Context.Map.Empty004.BeamStart.z = 0.0f;
	Context.Map.Empty004.BeamStartEndLength = 0.0f;
	Context.Map.Empty004.BeamStartTangent.x = 0.0f;
	Context.Map.Empty004.BeamStartTangent.y = 0.0f;
	Context.Map.Empty004.BeamStartTangent.z = 0.0f;
	Context.Map.Empty004.BeamVector.x = 0.0f;
	Context.Map.Empty004.BeamVector.y = 0.0f;
	Context.Map.Empty004.BeamVector.z = 0.0f;
	Context.Map.Empty004.CurrentLoopDuration = 0.0f;
	Context.Map.Empty004.ExecutionState = 0;
	Context.Map.Empty004.ExecutionStateSource = 0;
	Context.Map.Empty004.LocalSpace = false;
	Context.Map.Empty004.LoopCount = 0;
	Context.Map.Empty004.LoopedAge = 0.0f;
	Context.Map.Empty004.NormalizedLoopAge = 0.0f;
	Context.Map.Empty004.Scalability.DistanceFraction = 0.0f;
	Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Empty004.UseBeamTangents = false;
	Context.Map.System.Age = 0.0f;
	Context.Map.System.bCompleteOnInactive = false;
	Context.Map.System.CurrentLoopDuration = 0.0f;
	Context.Map.System.ExecutionState = 0;
	Context.Map.System.ExecutionStateSource = 0;
	Context.Map.System.LoopCount = 0;
	Context.Map.System.LoopedAge = 0.0f;
	Context.Map.System.NormalizedLoopAge = 0.0f;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Empty.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Empty.BeamDirection.x);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Empty.BeamDirection.y);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Empty.BeamDirection.z);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Empty.BeamEnd.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Empty.BeamEnd.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Empty.BeamEnd.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Empty.BeamEndTangent.x);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Empty.BeamEndTangent.y);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Empty.BeamEndTangent.z);
	OutputDataInt(0, 11, TmpWriteIndex, Context.Map.Empty.BeamID);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Empty.BeamStart.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Empty.BeamStart.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Empty.BeamStart.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Empty.BeamStartEndLength);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Empty.BeamStartTangent.x);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Empty.BeamStartTangent.y);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Empty.BeamStartTangent.z);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Empty.BeamVector.x);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Empty.BeamVector.y);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Empty.BeamVector.z);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Empty.CurrentLoopDuration);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.Empty.ExecutionState);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.Empty.ExecutionStateSource);
	OutputDataBool(0, 25, TmpWriteIndex, Context.Map.Empty.LocalSpace);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Empty.LoopCount);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Empty.LoopedAge);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Empty.NormalizedLoopAge);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Empty.Scalability.DistanceFraction);
	OutputDataInt(0, 30, TmpWriteIndex, Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 33, TmpWriteIndex, Context.Map.Empty.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 34, TmpWriteIndex, Context.Map.Empty.UseBeamTangents);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Empty001.Age);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Empty001.BeamDirection.x);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.Map.Empty001.BeamDirection.y);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.Empty001.BeamDirection.z);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.Map.Empty001.BeamEnd.x);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.Map.Empty001.BeamEnd.y);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.Map.Empty001.BeamEnd.z);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.Empty001.BeamEndTangent.x);
	OutputDataFloat(0, 43, TmpWriteIndex, Context.Map.Empty001.BeamEndTangent.y);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.Map.Empty001.BeamEndTangent.z);
	OutputDataInt(0, 45, TmpWriteIndex, Context.Map.Empty001.BeamID);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.Empty001.BeamStart.x);
	OutputDataFloat(0, 47, TmpWriteIndex, Context.Map.Empty001.BeamStart.y);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.Map.Empty001.BeamStart.z);
	OutputDataFloat(0, 49, TmpWriteIndex, Context.Map.Empty001.BeamStartEndLength);
	OutputDataFloat(0, 50, TmpWriteIndex, Context.Map.Empty001.BeamStartTangent.x);
	OutputDataFloat(0, 51, TmpWriteIndex, Context.Map.Empty001.BeamStartTangent.y);
	OutputDataFloat(0, 52, TmpWriteIndex, Context.Map.Empty001.BeamStartTangent.z);
	OutputDataFloat(0, 53, TmpWriteIndex, Context.Map.Empty001.BeamVector.x);
	OutputDataFloat(0, 54, TmpWriteIndex, Context.Map.Empty001.BeamVector.y);
	OutputDataFloat(0, 55, TmpWriteIndex, Context.Map.Empty001.BeamVector.z);
	OutputDataFloat(0, 56, TmpWriteIndex, Context.Map.Empty001.CurrentLoopDuration);
	OutputDataInt(0, 57, TmpWriteIndex, Context.Map.Empty001.ExecutionState);
	OutputDataInt(0, 58, TmpWriteIndex, Context.Map.Empty001.ExecutionStateSource);
	OutputDataBool(0, 59, TmpWriteIndex, Context.Map.Empty001.LocalSpace);
	OutputDataInt(0, 60, TmpWriteIndex, Context.Map.Empty001.LoopCount);
	OutputDataFloat(0, 61, TmpWriteIndex, Context.Map.Empty001.LoopedAge);
	OutputDataFloat(0, 62, TmpWriteIndex, Context.Map.Empty001.NormalizedLoopAge);
	OutputDataFloat(0, 63, TmpWriteIndex, Context.Map.Empty001.Scalability.DistanceFraction);
	OutputDataInt(0, 64, TmpWriteIndex, Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 65, TmpWriteIndex, Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 66, TmpWriteIndex, Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 67, TmpWriteIndex, Context.Map.Empty001.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 68, TmpWriteIndex, Context.Map.Empty001.UseBeamTangents);
	OutputDataFloat(0, 69, TmpWriteIndex, Context.Map.Empty002.Age);
	OutputDataFloat(0, 70, TmpWriteIndex, Context.Map.Empty002.BeamDirection.x);
	OutputDataFloat(0, 71, TmpWriteIndex, Context.Map.Empty002.BeamDirection.y);
	OutputDataFloat(0, 72, TmpWriteIndex, Context.Map.Empty002.BeamDirection.z);
	OutputDataFloat(0, 73, TmpWriteIndex, Context.Map.Empty002.BeamEnd.x);
	OutputDataFloat(0, 74, TmpWriteIndex, Context.Map.Empty002.BeamEnd.y);
	OutputDataFloat(0, 75, TmpWriteIndex, Context.Map.Empty002.BeamEnd.z);
	OutputDataFloat(0, 76, TmpWriteIndex, Context.Map.Empty002.BeamEndTangent.x);
	OutputDataFloat(0, 77, TmpWriteIndex, Context.Map.Empty002.BeamEndTangent.y);
	OutputDataFloat(0, 78, TmpWriteIndex, Context.Map.Empty002.BeamEndTangent.z);
	OutputDataInt(0, 79, TmpWriteIndex, Context.Map.Empty002.BeamID);
	OutputDataFloat(0, 80, TmpWriteIndex, Context.Map.Empty002.BeamStart.x);
	OutputDataFloat(0, 81, TmpWriteIndex, Context.Map.Empty002.BeamStart.y);
	OutputDataFloat(0, 82, TmpWriteIndex, Context.Map.Empty002.BeamStart.z);
	OutputDataFloat(0, 83, TmpWriteIndex, Context.Map.Empty002.BeamStartEndLength);
	OutputDataFloat(0, 84, TmpWriteIndex, Context.Map.Empty002.BeamStartTangent.x);
	OutputDataFloat(0, 85, TmpWriteIndex, Context.Map.Empty002.BeamStartTangent.y);
	OutputDataFloat(0, 86, TmpWriteIndex, Context.Map.Empty002.BeamStartTangent.z);
	OutputDataFloat(0, 87, TmpWriteIndex, Context.Map.Empty002.BeamVector.x);
	OutputDataFloat(0, 88, TmpWriteIndex, Context.Map.Empty002.BeamVector.y);
	OutputDataFloat(0, 89, TmpWriteIndex, Context.Map.Empty002.BeamVector.z);
	OutputDataFloat(0, 90, TmpWriteIndex, Context.Map.Empty002.CurrentLoopDuration);
	OutputDataInt(0, 91, TmpWriteIndex, Context.Map.Empty002.ExecutionState);
	OutputDataInt(0, 92, TmpWriteIndex, Context.Map.Empty002.ExecutionStateSource);
	OutputDataBool(0, 93, TmpWriteIndex, Context.Map.Empty002.LocalSpace);
	OutputDataInt(0, 94, TmpWriteIndex, Context.Map.Empty002.LoopCount);
	OutputDataFloat(0, 95, TmpWriteIndex, Context.Map.Empty002.LoopedAge);
	OutputDataFloat(0, 96, TmpWriteIndex, Context.Map.Empty002.NormalizedLoopAge);
	OutputDataFloat(0, 97, TmpWriteIndex, Context.Map.Empty002.Scalability.DistanceFraction);
	OutputDataInt(0, 98, TmpWriteIndex, Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 99, TmpWriteIndex, Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 100, TmpWriteIndex, Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 101, TmpWriteIndex, Context.Map.Empty002.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 102, TmpWriteIndex, Context.Map.Empty002.UseBeamTangents);
	OutputDataFloat(0, 103, TmpWriteIndex, Context.Map.Empty003.Age);
	OutputDataFloat(0, 104, TmpWriteIndex, Context.Map.Empty003.BeamDirection.x);
	OutputDataFloat(0, 105, TmpWriteIndex, Context.Map.Empty003.BeamDirection.y);
	OutputDataFloat(0, 106, TmpWriteIndex, Context.Map.Empty003.BeamDirection.z);
	OutputDataFloat(0, 107, TmpWriteIndex, Context.Map.Empty003.BeamEnd.x);
	OutputDataFloat(0, 108, TmpWriteIndex, Context.Map.Empty003.BeamEnd.y);
	OutputDataFloat(0, 109, TmpWriteIndex, Context.Map.Empty003.BeamEnd.z);
	OutputDataFloat(0, 110, TmpWriteIndex, Context.Map.Empty003.BeamEndTangent.x);
	OutputDataFloat(0, 111, TmpWriteIndex, Context.Map.Empty003.BeamEndTangent.y);
	OutputDataFloat(0, 112, TmpWriteIndex, Context.Map.Empty003.BeamEndTangent.z);
	OutputDataInt(0, 113, TmpWriteIndex, Context.Map.Empty003.BeamID);
	OutputDataFloat(0, 114, TmpWriteIndex, Context.Map.Empty003.BeamStart.x);
	OutputDataFloat(0, 115, TmpWriteIndex, Context.Map.Empty003.BeamStart.y);
	OutputDataFloat(0, 116, TmpWriteIndex, Context.Map.Empty003.BeamStart.z);
	OutputDataFloat(0, 117, TmpWriteIndex, Context.Map.Empty003.BeamStartEndLength);
	OutputDataFloat(0, 118, TmpWriteIndex, Context.Map.Empty003.BeamStartTangent.x);
	OutputDataFloat(0, 119, TmpWriteIndex, Context.Map.Empty003.BeamStartTangent.y);
	OutputDataFloat(0, 120, TmpWriteIndex, Context.Map.Empty003.BeamStartTangent.z);
	OutputDataFloat(0, 121, TmpWriteIndex, Context.Map.Empty003.BeamVector.x);
	OutputDataFloat(0, 122, TmpWriteIndex, Context.Map.Empty003.BeamVector.y);
	OutputDataFloat(0, 123, TmpWriteIndex, Context.Map.Empty003.BeamVector.z);
	OutputDataFloat(0, 124, TmpWriteIndex, Context.Map.Empty003.CurrentLoopDuration);
	OutputDataInt(0, 125, TmpWriteIndex, Context.Map.Empty003.ExecutionState);
	OutputDataInt(0, 126, TmpWriteIndex, Context.Map.Empty003.ExecutionStateSource);
	OutputDataBool(0, 127, TmpWriteIndex, Context.Map.Empty003.LocalSpace);
	OutputDataInt(0, 128, TmpWriteIndex, Context.Map.Empty003.LoopCount);
	OutputDataFloat(0, 129, TmpWriteIndex, Context.Map.Empty003.LoopedAge);
	OutputDataFloat(0, 130, TmpWriteIndex, Context.Map.Empty003.NormalizedLoopAge);
	OutputDataFloat(0, 131, TmpWriteIndex, Context.Map.Empty003.Scalability.DistanceFraction);
	OutputDataInt(0, 132, TmpWriteIndex, Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 133, TmpWriteIndex, Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 134, TmpWriteIndex, Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 135, TmpWriteIndex, Context.Map.Empty003.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 136, TmpWriteIndex, Context.Map.Empty003.UseBeamTangents);
	OutputDataFloat(0, 137, TmpWriteIndex, Context.Map.Empty004.Age);
	OutputDataFloat(0, 138, TmpWriteIndex, Context.Map.Empty004.BeamDirection.x);
	OutputDataFloat(0, 139, TmpWriteIndex, Context.Map.Empty004.BeamDirection.y);
	OutputDataFloat(0, 140, TmpWriteIndex, Context.Map.Empty004.BeamDirection.z);
	OutputDataFloat(0, 141, TmpWriteIndex, Context.Map.Empty004.BeamEnd.x);
	OutputDataFloat(0, 142, TmpWriteIndex, Context.Map.Empty004.BeamEnd.y);
	OutputDataFloat(0, 143, TmpWriteIndex, Context.Map.Empty004.BeamEnd.z);
	OutputDataFloat(0, 144, TmpWriteIndex, Context.Map.Empty004.BeamEndTangent.x);
	OutputDataFloat(0, 145, TmpWriteIndex, Context.Map.Empty004.BeamEndTangent.y);
	OutputDataFloat(0, 146, TmpWriteIndex, Context.Map.Empty004.BeamEndTangent.z);
	OutputDataInt(0, 147, TmpWriteIndex, Context.Map.Empty004.BeamID);
	OutputDataFloat(0, 148, TmpWriteIndex, Context.Map.Empty004.BeamStart.x);
	OutputDataFloat(0, 149, TmpWriteIndex, Context.Map.Empty004.BeamStart.y);
	OutputDataFloat(0, 150, TmpWriteIndex, Context.Map.Empty004.BeamStart.z);
	OutputDataFloat(0, 151, TmpWriteIndex, Context.Map.Empty004.BeamStartEndLength);
	OutputDataFloat(0, 152, TmpWriteIndex, Context.Map.Empty004.BeamStartTangent.x);
	OutputDataFloat(0, 153, TmpWriteIndex, Context.Map.Empty004.BeamStartTangent.y);
	OutputDataFloat(0, 154, TmpWriteIndex, Context.Map.Empty004.BeamStartTangent.z);
	OutputDataFloat(0, 155, TmpWriteIndex, Context.Map.Empty004.BeamVector.x);
	OutputDataFloat(0, 156, TmpWriteIndex, Context.Map.Empty004.BeamVector.y);
	OutputDataFloat(0, 157, TmpWriteIndex, Context.Map.Empty004.BeamVector.z);
	OutputDataFloat(0, 158, TmpWriteIndex, Context.Map.Empty004.CurrentLoopDuration);
	OutputDataInt(0, 159, TmpWriteIndex, Context.Map.Empty004.ExecutionState);
	OutputDataInt(0, 160, TmpWriteIndex, Context.Map.Empty004.ExecutionStateSource);
	OutputDataBool(0, 161, TmpWriteIndex, Context.Map.Empty004.LocalSpace);
	OutputDataInt(0, 162, TmpWriteIndex, Context.Map.Empty004.LoopCount);
	OutputDataFloat(0, 163, TmpWriteIndex, Context.Map.Empty004.LoopedAge);
	OutputDataFloat(0, 164, TmpWriteIndex, Context.Map.Empty004.NormalizedLoopAge);
	OutputDataFloat(0, 165, TmpWriteIndex, Context.Map.Empty004.Scalability.DistanceFraction);
	OutputDataInt(0, 166, TmpWriteIndex, Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 167, TmpWriteIndex, Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 168, TmpWriteIndex, Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 169, TmpWriteIndex, Context.Map.Empty004.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 170, TmpWriteIndex, Context.Map.Empty004.UseBeamTangents);
	OutputDataFloat(0, 171, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 172, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 173, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 174, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 175, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 176, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 177, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 178, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/

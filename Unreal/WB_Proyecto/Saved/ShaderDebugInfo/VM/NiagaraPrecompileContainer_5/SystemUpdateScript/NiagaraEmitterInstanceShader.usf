#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraID
{
	int Index;
	int AcquireTag;
};

struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_SystemState_LoopDelay;
	float Constants_SystemState_LoopDuration;
	float Constants_Empty_EmitterState_LoopDuration;
	float Constants_Empty_EmitterState_LoopDelay;
	float3 Constants_Empty_BeamEmitterSetup_BeamEnd;
	int Emitter_RandomSeed;
}

struct FParamMap0_Transient
{
	float3 Multiply_VectorByFloatVector;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	int ScalabilityExecutionState;
	bool SpawningbCanEverSpawn;
};

struct FParamMap0_SystemState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnRate;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SystemState
{
	bool LoopCountIncreased;
};

struct FParamMap0_Local_SpawnRate
{
	float InterpStartDT;
	float IntervalDT;
	int SpawnCount;
	float SpawnRate;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_BeamEmitterSetup
{
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
};

struct FParamMap0_Local
{
	FParamMap0_Local_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnRate SpawnRate;
	FParamMap0_Local_SystemState SystemState;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float3 SystemXAxis;
};

struct FParamMap0_Engine_Empty
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	FParamMap0_Engine_Empty Empty;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	float Time;
};

struct FParamMap0_Empty_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Empty_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Empty
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Empty_Scalability Scalability;
	FParamMap0_Empty_SpawnRate SpawnRate;
	bool UseBeamTangents;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_SystemState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Empty_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Empty_BeamEmitterSetup
{
	float3 BeamEnd;
};

struct FParamMap0_Constants_Empty
{
	FParamMap0_Constants_Empty_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Constants_Empty_EmitterState EmitterState;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Empty Empty;
	FParamMap0_Constants_SystemState SystemState;
};

struct FParamMap0_BeamEmitterSetup_Multiply_VectorByFloat001
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_BeamEmitterSetup_Multiply_VectorByFloat
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_BeamEmitterSetup
{
	bool AbsoluteEndTangent;
	bool AbsoluteStartTangent;
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float3 BeamStartTangent;
	FParamMap0_BeamEmitterSetup_Multiply_VectorByFloat Multiply_VectorByFloat;
	FParamMap0_BeamEmitterSetup_Multiply_VectorByFloat001 Multiply_VectorByFloat001;
	bool UseBeamTangents;
};

struct FParamMap0
{
	FParamMap0_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Empty Empty;
	FParamMap0_Engine Engine;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnRate SpawnRate;
	FParamMap0_System System;
	FParamMap0_SystemState SystemState;
	FParamMap0_Transient Transient;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Empty_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Empty_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Empty_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Empty_Func_(inout FSimulationContext Context);
void BeamEmitterSetup_SimulationPosition_Empty_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void BeamEmitterSetup_NF_TransformVector_Empty_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void BeamEmitterSetup_Multiply_VectorByFloat_Empty_Func_(out float3 Out_Result, inout FSimulationContext Context);
void BeamEmitterSetup_Multiply_VectorByFloat001_Empty_Func_(out float3 Out_Result, inout FSimulationContext Context);
void BeamEmitterSetup_Empty_Func_(inout FSimulationContext Context);
void Empty_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result11 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result12 = In_Condition && Result11;
	int ENiagaraExecutionState_IfResult;
	int ENiagaraExecutionStateSource_IfResult;
	if(Result12)
	{
	ENiagaraExecutionState_IfResult = In_NewState;
	ENiagaraExecutionStateSource_IfResult = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult;
}

void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result13 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result14 = In_Condition && Result13;
	int ENiagaraExecutionState_IfResult1;
	int ENiagaraExecutionStateSource_IfResult1;
	if(Result14)
	{
	ENiagaraExecutionState_IfResult1 = In_NewState;
	ENiagaraExecutionStateSource_IfResult1 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult1 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult1 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult1;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult1;
}

void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result16 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result17 = In_Condition && Result16;
	int ENiagaraExecutionState_IfResult2;
	int ENiagaraExecutionStateSource_IfResult2;
	if(Result17)
	{
	ENiagaraExecutionState_IfResult2 = In_NewState;
	ENiagaraExecutionStateSource_IfResult2 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult2 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult2 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult2;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult2;
}

void SystemState_Func_(inout FSimulationContext Context)
{
	float Constant3 = 0;
	bool Result = NiagaraAll(Context.Map.System.Age == Constant3);
	float Constant4 = 0.016667;
	float Result1 = max(Context.Map.Constants.SystemState.LoopDuration, Constant4);
	float Duration_IfResult;
	if(Result)
	{
	Duration_IfResult = Result1;
	}
	else
	{
	Duration_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float Constant5 = 0;
	Context.Map.System.CurrentLoopDuration = Duration_IfResult;
	Context.Map.SystemState.LoopDelay = Constant5;
	float Result2 = Context.Map.System.Age + Context.Map.Engine.DeltaTime;
	float Result3 = Context.Map.Engine.DeltaTime + Context.Map.System.LoopedAge;
	float Result4 = Result3 / Context.Map.System.CurrentLoopDuration;
	int Count;
	Count = Result4;
	int Constant6 = 0;
	int Result5 = max(Count, Constant6);
	float Result6 = Result5 * Context.Map.System.CurrentLoopDuration;
	float Result7 = Result3 - Result6;
	int Constant7 = 0;
	bool Result8 = NiagaraAll(Result5 > Constant7);
	int Result9 = Result5 + Context.Map.System.LoopCount;
	Context.Map.System.Age = Result2;
	Context.Map.System.LoopedAge = Result7;
	Context.Map.Local.SystemState.LoopCountIncreased = Result8;
	Context.Map.System.LoopCount = Result9;
	float float_IfResult;
	if(Context.Map.SystemState.RecalculateDurationEachLoop)
	{
	float_IfResult = Context.Map.Constants.SystemState.LoopDuration;
	}
	else
	{
	float_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult;
	float LoopedAge_IfResult;
	if(Context.Map.Local.SystemState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult = float_IfResult;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult = Context.Map.System.CurrentLoopDuration;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	Context.Map.System.CurrentLoopDuration = CurrentLoopDuration_IfResult;
	Context.Map.System.LoopedAge = LoopedAge_IfResult;
	float Result10 = Context.Map.System.LoopedAge / Context.Map.System.CurrentLoopDuration;
	Context.Map.System.NormalizedLoopAge = Result10;
	bool Constant8 = true;
	int Constant9 = 0;
	SystemState_SystemChangeState002_Func_(Context.Map.Transient.ScalabilityExecutionState, Constant8, Constant9, Context);
	int Constant10 = 3;
	bool Constant11 = false;
	int Constant12 = 3;
	SystemState_SystemChangeState_Func_(Constant10, Constant11, Constant12, Context);
	bool Constant13 = true;
	Context.Map.System.bCompleteOnInactive = Constant13;
	int Constant14 = 0;
	bool Result15 = NiagaraAll(Context.Map.Engine.Owner.ExecutionState != Constant14);
	int Constant15 = 2;
	SystemState_SystemChangeState001_Func_(Context.Map.Engine.Owner.ExecutionState, Result15, Constant15, Context);
}

void EmitterState_EmitterChangeState002_Empty_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant27 = 3;
	bool Result32 = NiagaraAll(Context.Map.Empty.ExecutionState != Constant27);
	int Constant28 = 4;
	bool Result33 = NiagaraAll(Context.Map.Empty.ExecutionState != Constant28);
	bool Result34 = Result32 && Result33;
	bool Result35 = In_Condition && Result34;
	bool Result36 = NiagaraAll(Context.Map.Empty.ExecutionStateSource <= In_NewStateSource);
	bool Result37 = Result35 && Result36;
	int ENiagaraExecutionState_IfResult3;
	int ENiagaraExecutionStateSource_IfResult3;
	if(Result37)
	{
	ENiagaraExecutionState_IfResult3 = In_NewState;
	ENiagaraExecutionStateSource_IfResult3 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult3 = Context.Map.Empty.ExecutionState;
	ENiagaraExecutionStateSource_IfResult3 = Context.Map.Empty.ExecutionStateSource;
	}
	Context.Map.Empty.ExecutionState = ENiagaraExecutionState_IfResult3;
	Context.Map.Empty.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult3;
}

void EmitterState_EmitterChangeState005_Empty_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant33 = 3;
	bool Result41 = NiagaraAll(Context.Map.Empty.ExecutionState != Constant33);
	int Constant34 = 4;
	bool Result42 = NiagaraAll(Context.Map.Empty.ExecutionState != Constant34);
	bool Result43 = Result41 && Result42;
	bool Result44 = In_Condition && Result43;
	bool Result45 = NiagaraAll(Context.Map.Empty.ExecutionStateSource <= In_NewStateSource);
	bool Result46 = Result44 && Result45;
	int ENiagaraExecutionState_IfResult4;
	int ENiagaraExecutionStateSource_IfResult4;
	if(Result46)
	{
	ENiagaraExecutionState_IfResult4 = In_NewState;
	ENiagaraExecutionStateSource_IfResult4 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult4 = Context.Map.Empty.ExecutionState;
	ENiagaraExecutionStateSource_IfResult4 = Context.Map.Empty.ExecutionStateSource;
	}
	Context.Map.Empty.ExecutionState = ENiagaraExecutionState_IfResult4;
	Context.Map.Empty.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult4;
}

void EmitterState_EmitterChangeState003_Empty_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant39 = 3;
	bool Result51 = NiagaraAll(Context.Map.Empty.ExecutionState != Constant39);
	int Constant40 = 4;
	bool Result52 = NiagaraAll(Context.Map.Empty.ExecutionState != Constant40);
	bool Result53 = Result51 && Result52;
	bool Result54 = In_Condition && Result53;
	bool Result55 = NiagaraAll(Context.Map.Empty.ExecutionStateSource <= In_NewStateSource);
	bool Result56 = Result54 && Result55;
	int ENiagaraExecutionState_IfResult5;
	int ENiagaraExecutionStateSource_IfResult5;
	if(Result56)
	{
	ENiagaraExecutionState_IfResult5 = In_NewState;
	ENiagaraExecutionStateSource_IfResult5 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult5 = Context.Map.Empty.ExecutionState;
	ENiagaraExecutionStateSource_IfResult5 = Context.Map.Empty.ExecutionStateSource;
	}
	Context.Map.Empty.ExecutionState = ENiagaraExecutionState_IfResult5;
	Context.Map.Empty.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult5;
}

void EmitterState_Empty_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Empty.ExecutionState;
	float Constant16 = 0.016667;
	float Result18 = max(Context.Map.Constants.Empty.EmitterState.LoopDuration, Constant16);
	Context.Map.Local.EmitterState.LoopDuration = Result18;
	float Constant17 = 0;
	bool Result19 = NiagaraAll(Context.Map.Empty.Age == Constant17);
	float Duration_IfResult1;
	if(Result19)
	{
	Duration_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult1 = Context.Map.Empty.CurrentLoopDuration;
	}
	float Constant18 = 0;
	Context.Map.Empty.CurrentLoopDuration = Duration_IfResult1;
	Context.Map.EmitterState.LoopDelay = Constant18;
	float Result20 = Context.Map.Empty.Age + Context.Map.Engine.DeltaTime;
	float Result21 = Context.Map.Engine.DeltaTime + Context.Map.Empty.LoopedAge;
	float Result22 = Result21 / Context.Map.Empty.CurrentLoopDuration;
	int Count1;
	Count1 = Result22;
	int Constant19 = 0;
	int Result23 = max(Count1, Constant19);
	float Result24 = Result23 * Context.Map.Empty.CurrentLoopDuration;
	float Result25 = Result21 - Result24;
	int Constant20 = 0;
	bool Result26 = NiagaraAll(Result23 > Constant20);
	int Result27 = Result23 + Context.Map.Empty.LoopCount;
	Context.Map.Empty.Age = Result20;
	Context.Map.Empty.LoopedAge = Result25;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result26;
	Context.Map.Empty.LoopCount = Result27;
	bool Constant21 = false;
	Context.Map.EmitterState.RecalculateDurationEachLoop = Constant21;
	float float_IfResult1;
	if(Context.Map.EmitterState.RecalculateDurationEachLoop)
	{
	float_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	float_IfResult1 = Context.Map.Empty.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult1;
	float LoopedAge_IfResult1;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult1 = float_IfResult1;
	LoopedAge_IfResult1 = Context.Map.Empty.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult1 = Context.Map.Empty.CurrentLoopDuration;
	LoopedAge_IfResult1 = Context.Map.Empty.LoopedAge;
	}
	Context.Map.Empty.CurrentLoopDuration = CurrentLoopDuration_IfResult1;
	Context.Map.Empty.LoopedAge = LoopedAge_IfResult1;
	float Result28 = Context.Map.Empty.LoopedAge / Context.Map.Empty.CurrentLoopDuration;
	Context.Map.Empty.NormalizedLoopAge = Result28;
	float Constant22 = 0;
	float Constant23 = 1.0001;
	float Result29 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant22,Constant23);
	Context.Map.Empty.Scalability.DistanceFraction = Result29;
	int Constant24 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant24;
	int Constant25 = 0;
	bool Result30 = NiagaraAll(Context.Map.Engine.Empty.NumParticles == Constant25);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result30;
	int Constant26 = 0;
	bool Result31 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant26);
	EmitterState_EmitterChangeState002_Empty_Func_(Context.Map.System.ExecutionState, Result31, Context.Map.System.ExecutionStateSource, Context);
	int Constant29 = 1;
	int Constant30 = 0;
	bool Result38 = NiagaraAll(Context.Map.System.ExecutionState != Constant30);
	int Constant31 = 2;
	bool Result39 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant31);
	bool Result40 = Result38 && Result39;
	int Constant32 = 1;
	EmitterState_EmitterChangeState005_Empty_Func_(Constant29, Result40, Constant32, Context);
	int Constant35 = 3;
	int Constant36 = 0;
	bool Result47 = NiagaraAll(Context.Map.Empty.ExecutionState != Constant36);
	int Constant37 = 0;
	bool Result48 = NiagaraAll(Context.Map.Empty.ExecutionStateSource != Constant37);
	bool Result49 = Result47 && Result48;
	bool Result50 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result49;
	int Constant38 = 3;
	EmitterState_EmitterChangeState003_Empty_Func_(Constant35, Result50, Constant38, Context);
}

void BeamEmitterSetup_SimulationPosition_Empty_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant41 = false;
	float3 Constant42 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant41)
	{
	Vector_IfResult = Constant42;
	}
	else
	{
	Vector_IfResult = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result58 = length(In_V);
	bool Result59 = NiagaraAll(Result58 < In_Threshold);
	float Result60 = length(In_Fallback);
	float3 Vector_IfResult1;
	float float_IfResult2;
	if(Result59)
	{
	Vector_IfResult1 = In_Fallback;
	float_IfResult2 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult1 = In_V;
	float_IfResult2 = Result58;
	}
	float3 Result61 = Vector_IfResult1 / float_IfResult2;
	float3 Vector_IfResult2;
	float float_IfResult3;
	if(Result59)
	{
	Vector_IfResult2 = In_Fallback;
	float_IfResult3 = Result60;
	}
	else
	{
	Vector_IfResult2 = Result61;
	float_IfResult3 = float_IfResult2;
	}
	Out_Direction = Vector_IfResult2;
	Out_Length = float_IfResult3;
	Out_BelowThreshold = Result59;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant50 = 0;
	bool Result62 = NiagaraAll(In_SourceSpace == Constant50);
	int Constant51 = 0;
	bool Result63 = NiagaraAll(In_DestinationSpace == Constant51);
	bool Result64 = Result62 && Result63;
	int Constant52 = 1;
	bool Result65 = NiagaraAll(In_SourceSpace == Constant52);
	int Constant53 = 1;
	bool Result66 = NiagaraAll(In_DestinationSpace == Constant53);
	bool Result67 = Result65 && Result66;
	bool Result68 = Result64 || Result67;
	int Constant54 = 2;
	bool Result69 = NiagaraAll(In_SourceSpace == Constant54);
	int Constant55 = 2;
	bool Result70 = NiagaraAll(In_DestinationSpace == Constant55);
	bool Result71 = Result69 && Result70;
	bool Result72 = Result68 || Result71;
	bool Result73 = Result62 && Result70;
	bool Result74 = Result69 && Result63;
	bool Result75 = Result73 || Result74;
	bool Result76 = In_bLocalSpace && Result75;
	bool Result77 = Result72 || Result76;
	bool Result78 = !In_bLocalSpace;
	bool Result79 = Result62 && Result66;
	bool Result80 = Result65 && Result63;
	bool Result81 = Result79 || Result80;
	bool Result82 = Result78 && Result81;
	bool Result83 = Result77 || Result82;
	bool Result84 = In_bLocalSpace && Result79;
	bool Result85 = Result69 && Result66;
	bool Result86 = Result84 || Result85;
	bool Result87 = Result78 && Result74;
	bool Result88 = Result86 || Result87;
	float4x4 Matrix_IfResult1;
	if(Result88)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result83;
	Out_OutTransform = Matrix_IfResult1;
}

void BeamEmitterSetup_NF_TransformVector_Empty_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant49 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant49, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result89 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult3;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result89;
	}
	Out_OutVector = Vector_IfResult3;
}

void BeamEmitterSetup_Multiply_VectorByFloat_Empty_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Constant57 = float3(1,1,1);
	Context.Map.BeamEmitterSetup.Multiply_VectorByFloat.VECTOR_VAR = Constant57;
	float Constant58 = 1;
	Context.Map.BeamEmitterSetup.Multiply_VectorByFloat.FLOAT_VAR = Constant58;
	float3 Result91 = Context.Map.BeamEmitterSetup.Multiply_VectorByFloat.VECTOR_VAR * Context.Map.BeamEmitterSetup.Multiply_VectorByFloat.FLOAT_VAR;
	Out_Result = Result91;
}

void BeamEmitterSetup_Multiply_VectorByFloat001_Empty_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Constant60 = float3(1,1,1);
	Context.Map.BeamEmitterSetup.Multiply_VectorByFloat001.VECTOR_VAR = Constant60;
	float Constant61 = 1;
	Context.Map.BeamEmitterSetup.Multiply_VectorByFloat001.FLOAT_VAR = Constant61;
	float3 Result94 = Context.Map.BeamEmitterSetup.Multiply_VectorByFloat001.VECTOR_VAR * Context.Map.BeamEmitterSetup.Multiply_VectorByFloat001.FLOAT_VAR;
	Out_Result = Result94;
}

void BeamEmitterSetup_Empty_Func_(inout FSimulationContext Context)
{
	float3 BeamEmitterSetup_SimulationPosition_Empty_Func_Output_SimulationPosition;
	BeamEmitterSetup_SimulationPosition_Empty_Func_(BeamEmitterSetup_SimulationPosition_Empty_Func_Output_SimulationPosition, Context);
	Context.Map.BeamEmitterSetup.BeamStart = BeamEmitterSetup_SimulationPosition_Empty_Func_Output_SimulationPosition;
	float3 Result57 = Context.Map.BeamEmitterSetup.BeamStart - Context.Map.Constants.Empty.BeamEmitterSetup.BeamEnd;
	float3 Constant43 = float3(0,0,1);
	float Constant44 = 1e-05;
	float Constant45 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result57, Constant43, Constant44, Constant45, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	int Constant46 = 2;
	int Constant47 = 0;
	bool Constant48 = false;
	float3 BeamEmitterSetup_NF_TransformVector_Empty_Func_Output_OutVector;
	BeamEmitterSetup_NF_TransformVector_Empty_Func_(Context.Map.Constants.Empty.BeamEmitterSetup.BeamEnd, Constant46, Constant47, Constant48, BeamEmitterSetup_NF_TransformVector_Empty_Func_Output_OutVector, Context);
	float3 Result90 = Context.Map.BeamEmitterSetup.BeamStart + BeamEmitterSetup_NF_TransformVector_Empty_Func_Output_OutVector;
	Context.Map.Local.BeamEmitterSetup.BeamStart = Context.Map.BeamEmitterSetup.BeamStart;
	Context.Map.Local.BeamEmitterSetup.BeamStartEndLength = DirectionAndLengthSafe_Func_Output_Length;
	Context.Map.Local.BeamEmitterSetup.BeamEnd = Result90;
	bool Constant56 = false;
	Context.Map.BeamEmitterSetup.AbsoluteStartTangent = Constant56;
	Context.Map.Transient.Multiply_VectorByFloatVector = Context.Map.Engine.Owner.SystemXAxis;
	float3 BeamEmitterSetup_Multiply_VectorByFloat_Empty_Func_Output_Result;
	BeamEmitterSetup_Multiply_VectorByFloat_Empty_Func_(BeamEmitterSetup_Multiply_VectorByFloat_Empty_Func_Output_Result, Context);
	Context.Map.BeamEmitterSetup.BeamStartTangent = BeamEmitterSetup_Multiply_VectorByFloat_Empty_Func_Output_Result;
	float3 Result92 = Context.Map.BeamEmitterSetup.BeamStartTangent * Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	float3 Result93 = Context.Map.Local.BeamEmitterSetup.BeamStart + Result92;
	float3 Vector_IfResult4;
	if(Context.Map.BeamEmitterSetup.AbsoluteStartTangent)
	{
	Vector_IfResult4 = Context.Map.BeamEmitterSetup.BeamStartTangent;
	}
	else
	{
	Vector_IfResult4 = Result93;
	}
	bool Constant59 = false;
	Context.Map.BeamEmitterSetup.AbsoluteEndTangent = Constant59;
	float3 BeamEmitterSetup_Multiply_VectorByFloat001_Empty_Func_Output_Result;
	BeamEmitterSetup_Multiply_VectorByFloat001_Empty_Func_(BeamEmitterSetup_Multiply_VectorByFloat001_Empty_Func_Output_Result, Context);
	Context.Map.BeamEmitterSetup.BeamEndTangent = BeamEmitterSetup_Multiply_VectorByFloat001_Empty_Func_Output_Result;
	float3 Result95 = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength * Context.Map.BeamEmitterSetup.BeamEndTangent;
	float3 Result96 = Result95 + Context.Map.Local.BeamEmitterSetup.BeamEnd;
	float3 Vector_IfResult5;
	if(Context.Map.BeamEmitterSetup.AbsoluteEndTangent)
	{
	Vector_IfResult5 = Context.Map.BeamEmitterSetup.BeamEndTangent;
	}
	else
	{
	Vector_IfResult5 = Result96;
	}
	Context.Map.Local.BeamEmitterSetup.BeamStartTangent = Vector_IfResult4;
	Context.Map.Local.BeamEmitterSetup.BeamEndTangent = Vector_IfResult5;
	bool Constant62 = false;
	Context.Map.BeamEmitterSetup.UseBeamTangents = Constant62;
	float3 Result97 = Context.Map.Local.BeamEmitterSetup.BeamEnd - Context.Map.Local.BeamEmitterSetup.BeamStart;
	float3 Constant63 = float3(0,0,1);
	float Constant64 = 1e-05;
	float Constant65 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result97, Constant63, Constant64, Constant65, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	Context.Map.Empty.BeamStart = Context.Map.Local.BeamEmitterSetup.BeamStart;
	Context.Map.Empty.BeamStartTangent = Context.Map.Local.BeamEmitterSetup.BeamStartTangent;
	Context.Map.Empty.BeamEnd = Context.Map.Local.BeamEmitterSetup.BeamEnd;
	Context.Map.Empty.BeamEndTangent = Context.Map.Local.BeamEmitterSetup.BeamEndTangent;
	Context.Map.Empty.UseBeamTangents = Context.Map.BeamEmitterSetup.UseBeamTangents;
	Context.Map.Empty.BeamStartEndLength = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	Context.Map.Empty.BeamVector = Result97;
	Context.Map.Empty.BeamDirection = DirectionAndLengthSafe_Func_Output_Direction1;
	bool Result98 = NiagaraAll(Context.Map.Empty.LoopCount > Context.Map.Empty.BeamID);
	int Constant66 = -1;
	int int32_IfResult;
	if(Result98)
	{
	int32_IfResult = Context.Map.Empty.LoopCount;
	}
	else
	{
	int32_IfResult = Constant66;
	}
	Context.Map.Empty.BeamID = int32_IfResult;
}

void Empty_Func_(inout FSimulationContext Context)
{
	EnterStatScope(3 );
	EmitterState_Empty_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	BeamEmitterSetup_Empty_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = (false);
	Context.Map.Local.SystemState.LoopCountIncreased = Constant;
	bool Constant1 = false;
	Context.Map.SystemState.RecalculateDurationEachLoop = Constant1;
	int Constant2 = 0;
	Context.Map.Transient.ScalabilityExecutionState = Constant2;
	EnterStatScope(1 );
	SystemState_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Empty_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(5 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = InputDataInt(0, 0);
	Context.Map.Empty.Age = InputDataFloat(0, 1);
	Context.Map.Empty.BeamDirection.x = InputDataFloat(0, 2);
	Context.Map.Empty.BeamDirection.y = InputDataFloat(0, 3);
	Context.Map.Empty.BeamDirection.z = InputDataFloat(0, 4);
	Context.Map.Empty.BeamEnd.x = InputDataFloat(0, 5);
	Context.Map.Empty.BeamEnd.y = InputDataFloat(0, 6);
	Context.Map.Empty.BeamEnd.z = InputDataFloat(0, 7);
	Context.Map.Empty.BeamEndTangent.x = InputDataFloat(0, 8);
	Context.Map.Empty.BeamEndTangent.y = InputDataFloat(0, 9);
	Context.Map.Empty.BeamEndTangent.z = InputDataFloat(0, 10);
	Context.Map.Empty.BeamID = InputDataInt(0, 11);
	Context.Map.Empty.BeamStart.x = InputDataFloat(0, 12);
	Context.Map.Empty.BeamStart.y = InputDataFloat(0, 13);
	Context.Map.Empty.BeamStart.z = InputDataFloat(0, 14);
	Context.Map.Empty.BeamStartEndLength = InputDataFloat(0, 15);
	Context.Map.Empty.BeamStartTangent.x = InputDataFloat(0, 16);
	Context.Map.Empty.BeamStartTangent.y = InputDataFloat(0, 17);
	Context.Map.Empty.BeamStartTangent.z = InputDataFloat(0, 18);
	Context.Map.Empty.BeamVector.x = InputDataFloat(0, 19);
	Context.Map.Empty.BeamVector.y = InputDataFloat(0, 20);
	Context.Map.Empty.BeamVector.z = InputDataFloat(0, 21);
	Context.Map.Empty.CurrentLoopDuration = InputDataFloat(0, 22);
	Context.Map.Empty.ExecutionState = InputDataInt(0, 23);
	Context.Map.Empty.ExecutionStateSource = InputDataInt(0, 24);
	Context.Map.Empty.LocalSpace = InputDataBool(0, 25);
	Context.Map.Empty.LoopCount = InputDataInt(0, 26);
	Context.Map.Empty.LoopedAge = InputDataFloat(0, 27);
	Context.Map.Empty.NormalizedLoopAge = InputDataFloat(0, 28);
	Context.Map.Empty.Scalability.DistanceFraction = InputDataFloat(0, 29);
	Context.Map.Empty.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Empty.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Empty.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Empty.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Empty.SpawnRate.SpawnRemainder = InputDataFloat(0, 34);
	Context.Map.Empty.UseBeamTangents = InputDataBool(0, 35);
	Context.Map.System.Age = InputDataFloat(0, 36);
	Context.Map.System.bCompleteOnInactive = InputDataBool(0, 37);
	Context.Map.System.CurrentLoopDuration = InputDataFloat(0, 38);
	Context.Map.System.ExecutionState = InputDataInt(0, 39);
	Context.Map.System.ExecutionStateSource = InputDataInt(0, 40);
	Context.Map.System.LoopCount = InputDataInt(0, 41);
	Context.Map.System.LoopedAge = InputDataFloat(0, 42);
	Context.Map.System.NormalizedLoopAge = InputDataFloat(0, 43);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.Empty.NumParticles = InputDataInt(1, 1);
	Context.Map.Engine.Owner.ExecutionState = InputDataInt(1, 2);
	Context.Map.Engine.Owner.LODDistanceFraction = InputDataFloat(1, 3);
	Context.Map.Engine.Owner.Position.x = InputDataFloat(1, 4);
	Context.Map.Engine.Owner.Position.y = InputDataFloat(1, 5);
	Context.Map.Engine.Owner.Position.z = InputDataFloat(1, 6);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][0] = InputDataFloat(1, 7);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][1] = InputDataFloat(1, 8);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][2] = InputDataFloat(1, 9);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][3] = InputDataFloat(1, 10);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][0] = InputDataFloat(1, 11);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][1] = InputDataFloat(1, 12);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][2] = InputDataFloat(1, 13);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][3] = InputDataFloat(1, 14);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][0] = InputDataFloat(1, 15);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][1] = InputDataFloat(1, 16);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][2] = InputDataFloat(1, 17);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][3] = InputDataFloat(1, 18);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][0] = InputDataFloat(1, 19);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][1] = InputDataFloat(1, 20);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][2] = InputDataFloat(1, 21);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][3] = InputDataFloat(1, 22);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][0] = InputDataFloat(1, 23);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][1] = InputDataFloat(1, 24);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][2] = InputDataFloat(1, 25);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][3] = InputDataFloat(1, 26);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][0] = InputDataFloat(1, 27);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][1] = InputDataFloat(1, 28);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][2] = InputDataFloat(1, 29);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][3] = InputDataFloat(1, 30);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][0] = InputDataFloat(1, 31);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][1] = InputDataFloat(1, 32);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][2] = InputDataFloat(1, 33);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][3] = InputDataFloat(1, 34);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][0] = InputDataFloat(1, 35);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][1] = InputDataFloat(1, 36);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][2] = InputDataFloat(1, 37);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][3] = InputDataFloat(1, 38);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][0] = InputDataFloat(1, 39);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][1] = InputDataFloat(1, 40);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][2] = InputDataFloat(1, 41);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][3] = InputDataFloat(1, 42);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][0] = InputDataFloat(1, 43);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][1] = InputDataFloat(1, 44);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][2] = InputDataFloat(1, 45);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][3] = InputDataFloat(1, 46);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][0] = InputDataFloat(1, 47);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][1] = InputDataFloat(1, 48);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][2] = InputDataFloat(1, 49);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][3] = InputDataFloat(1, 50);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][0] = InputDataFloat(1, 51);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][1] = InputDataFloat(1, 52);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][2] = InputDataFloat(1, 53);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][3] = InputDataFloat(1, 54);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][0] = InputDataFloat(1, 55);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][1] = InputDataFloat(1, 56);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][2] = InputDataFloat(1, 57);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][3] = InputDataFloat(1, 58);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][0] = InputDataFloat(1, 59);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][1] = InputDataFloat(1, 60);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][2] = InputDataFloat(1, 61);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][3] = InputDataFloat(1, 62);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][0] = InputDataFloat(1, 63);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][1] = InputDataFloat(1, 64);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][2] = InputDataFloat(1, 65);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][3] = InputDataFloat(1, 66);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][0] = InputDataFloat(1, 67);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][1] = InputDataFloat(1, 68);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][2] = InputDataFloat(1, 69);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][3] = InputDataFloat(1, 70);
	Context.Map.Engine.Owner.SystemXAxis.x = InputDataFloat(1, 71);
	Context.Map.Engine.Owner.SystemXAxis.y = InputDataFloat(1, 72);
	Context.Map.Engine.Owner.SystemXAxis.z = InputDataFloat(1, 73);
	Context.Map.Constants.SystemState.LoopDelay = Constants_SystemState_LoopDelay;
	Context.Map.Constants.SystemState.LoopDuration = Constants_SystemState_LoopDuration;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Empty.EmitterState.LoopDuration = Constants_Empty_EmitterState_LoopDuration;
	Context.Map.Constants.Empty.EmitterState.LoopDelay = Constants_Empty_EmitterState_LoopDelay;
	Context.Map.Constants.Empty.BeamEmitterSetup.BeamEnd = Constants_Empty_BeamEmitterSetup_BeamEnd;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Empty.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Empty.BeamDirection.x);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Empty.BeamDirection.y);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Empty.BeamDirection.z);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Empty.BeamEnd.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Empty.BeamEnd.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Empty.BeamEnd.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Empty.BeamEndTangent.x);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Empty.BeamEndTangent.y);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Empty.BeamEndTangent.z);
	OutputDataInt(0, 11, TmpWriteIndex, Context.Map.Empty.BeamID);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Empty.BeamStart.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Empty.BeamStart.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Empty.BeamStart.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Empty.BeamStartEndLength);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Empty.BeamStartTangent.x);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Empty.BeamStartTangent.y);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Empty.BeamStartTangent.z);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Empty.BeamVector.x);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Empty.BeamVector.y);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Empty.BeamVector.z);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Empty.CurrentLoopDuration);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.Empty.ExecutionState);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.Empty.ExecutionStateSource);
	OutputDataBool(0, 25, TmpWriteIndex, Context.Map.Empty.LocalSpace);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Empty.LoopCount);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Empty.LoopedAge);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Empty.NormalizedLoopAge);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Empty.Scalability.DistanceFraction);
	OutputDataInt(0, 30, TmpWriteIndex, Context.Map.Empty.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Empty.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Empty.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 33, TmpWriteIndex, Context.Map.Empty.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Empty.SpawnRate.SpawnRemainder);
	OutputDataBool(0, 35, TmpWriteIndex, Context.Map.Empty.UseBeamTangents);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 37, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 39, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 40, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 41, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 43, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
